<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フリーランサーとして生きる道</title>
  
  <subtitle>令和元年の目標はNode.jsを極めること！！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lancers.work/"/>
  <updated>2019-04-17T23:48:22.000Z</updated>
  <id>https://lancers.work/</id>
  
  <author>
    <name>bulma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GoogleのreCAPTCHA v3をサクッと設置する（PHP＋jQuery編）</title>
    <link href="https://lancers.work/recaptcha-v3-php-jqueryi/"/>
    <id>https://lancers.work/recaptcha-v3-php-jqueryi/</id>
    <published>2019-04-17T09:24:00.000Z</published>
    <updated>2019-04-17T23:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/recaptcha-v3-php-jquery.webp" alt></p><p>自分のサイトに設置してあるフォームなどをボットから守る手段として<strong>GoogleのreCAPTCHA</strong>があります。</p><p>reCAPTCHAのバージョンが<strong>v3</strong>になり、v2まであった利用者の操作（チェックボックスクリック、画像選択など）が不要になり、利用者の手を煩わせることなくサイトを安全に守ることができるようになりました。</p><p>これはサイト運営者、サイト利用者の双方にとってとても有益なことです。</p><p>今後はreCAPTCHA v3を積極的に使いたいところですが、設置方法が分かりづらいというクライアント様が案外多いので書き留めておきます。</p><p>クライアント様はPHP利用が多いので、今回はPHPのソース公開となっていますが、PHPコード自体非常に短いですので、容易にNode.jsに置き換えられると思いますので、是非参考にご活用ください。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#recaptcha-v3に登録する">reCAPTCHA v3に登録する</a></li><li><a href="#recaptcha-v3をプログラムへ実装する">reCAPTCHA v3をプログラムへ実装する</a></li></ul><!-- tocstop --></div><h2><span id="recaptcha-v3に登録する">reCAPTCHA v3に登録する</span></h2><p>GoogleのreCAPTCHAの下記サイトで、必要な情報を登録・取得していきます。</p><a href="https://www.google.com/recaptcha/intro/v3.html" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img></div><div class="descriptions"><div class="og-title">reCAPTCHA</div><div class="og-description">reCAPTCHA is a free security service that protects your websites from …</div></div></div></a><p>reCAPTCHAのサイトの右上の<code>Admin console</code>ボタンを押します。</p><p><img src="/images/recaptcha-v3-php-jquery-1.webp" alt></p><p>次のページで<code>作成（＋）</code>をクリックし、下の画像の画面が表示されたら赤枠を埋め、<code>送信ボタン</code>を押します。</p><p><strong>ラベル</strong>は任意の名前でOKです。</p><p><img src="/images/recaptcha-v3-php-jquery-2.webp" alt></p><p>送信ボタンを押すと、<strong>サイトキー</strong>と<strong>シークレットキー</strong>が発行されます。</p><p><img src="/images/recaptcha-v3-php-jquery-3.webp" alt></p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h2><span id="recaptcha-v3をプログラムへ実装する">reCAPTCHA v3をプログラムへ実装する</span></h2><p><strong>reCAPTCHA v3サンプルプログラム</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * reCAPTCHA検証関数</span><br><span class="line"> * @param string <span class="variable">$token</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> checkReCaptcha(<span class="variable">$token</span>) &#123;</span><br><span class="line">    global <span class="variable">$secret_key</span>;</span><br><span class="line">    <span class="variable">$ch</span> = curl_init();</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="string">"https://www.google.com/recaptcha/api/siteverify?secret=<span class="variable">$secret_key</span>&amp;response=<span class="variable">$token</span>"</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">    <span class="variable">$res</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    curl_close(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="built_in">return</span> json_decode(<span class="variable">$res</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$site_key</span> = <span class="string">'取得したサイトキー'</span>;</span><br><span class="line"><span class="variable">$secret_key</span> = <span class="string">'取得したシークレットキー'</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">"g-recaptcha-response"</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">"g-recaptcha-response"</span>] != NULL) &#123;</span><br><span class="line">    <span class="variable">$res</span> = checkReCaptcha(<span class="variable">$_POST</span>[<span class="string">"g-recaptcha-response"</span>], <span class="variable">$secret_key</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>[<span class="string">'success'</span>] != <span class="literal">true</span> || <span class="variable">$res</span>[<span class="string">'score'</span>] &lt; 0.5 ) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'あなたのアクセスは無効です。。。'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 安全なアクセスの場合の処理</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'あなたのアクセスは安全ですね！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;html lang=<span class="string">"ja"</span>&gt;</span><br><span class="line">&lt;head&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form id=<span class="string">"hogeForm"</span> method=<span class="string">"post"</span> action=<span class="string">"test.php"</span>&gt;</span><br><span class="line">&lt;button <span class="built_in">type</span>=<span class="string">"button"</span> onclick=<span class="string">"hogeSubmit()"</span>&gt;送信&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://www.google.com/recaptcha/api.js?render=&lt;?php echo <span class="variable">$site_key</span>; ?&gt;"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hogeSubmit</span></span>() &#123;</span><br><span class="line">  grecaptcha.ready(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    grecaptcha.execute(<span class="string">'&lt;?php echo $site_key; ?&gt;'</span>, &#123;action: <span class="string">'homepage'</span>&#125;)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span>(token) &#123;</span><br><span class="line">    // alert(token); トークンを確認したい方はどうぞ！</span><br><span class="line">    $(<span class="string">'#hogeForm'</span>).append(<span class="string">'&lt;input type="hidden" name="g-recaptcha-response" value="'</span>+token+<span class="string">'"&gt;'</span>);</span><br><span class="line">    $(<span class="string">'#hogeForm'</span>).submit();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>サンプルプログラムはPHP+jQuery+HTMLとなっています。</p><ul><li>$site_key = ‘取得したサイトキー’;</li><li>$secret_key = ‘取得したシークレットキー’;</li></ul><p>この2箇所にキーを入力してサーバーに設置すると、そのページでreCAPTCHA v3が有効に動作します。</p><p>reCAPTCHAの処理結果を判断している箇所↓ですが、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>[<span class="string">'success'</span>] != <span class="literal">true</span> || <span class="variable">$res</span>[<span class="string">'score'</span>] &lt; 0.5 ) &#123;</span><br></pre></td></tr></table></figure><p><em>スコアの条件（0.5）を小さくすると判定が厳しくなります。</em><br>（サンプルの例ではスコアの真ん中の値である0.5以下は怪しいアクセスと設定しています。）</p><p>また、reCAPTCHAとは直接関係ありませんが、送信ボタンのタグ内に「name=”submit”」を書いてしまうと、jQueryのsubmit()が機能しなくなりますのでご注意ください。</p><p>それではGoogleのreCAPTCHA v3を利用してあなたの大切なサイトを迷惑なボットたちから守りましょう！</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/recaptcha-v3-php-jquery.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;自分のサイトに設置してあるフォームなどをボットから守る手段として&lt;strong&gt;GoogleのreCAPTCHA&lt;/strong&gt;があります。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="jQuery" scheme="https://lancers.work/tags/jQuery/"/>
    
      <category term="Google" scheme="https://lancers.work/tags/Google/"/>
    
      <category term="reCAPTCHA" scheme="https://lancers.work/tags/reCAPTCHA/"/>
    
      <category term="PHP" scheme="https://lancers.work/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>HexoのCSSが反映されない時の対処法 ～CLOUDFLARE編～</title>
    <link href="https://lancers.work/hexo-css-not-reflected-cloudflare/"/>
    <id>https://lancers.work/hexo-css-not-reflected-cloudflare/</id>
    <published>2019-04-16T01:43:00.000Z</published>
    <updated>2019-04-18T02:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hexo-css-not-reflected-cloudflare.webp" alt></p><p>Hexoでテンプレートをカスタマイズした後、ジェネレートして、デプロイした時にCSSが本番サイトに反映されないというのは、結構Hexoあるあるの話です。</p><p>まず最初に思いつく解決方法は、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g</span><br><span class="line"></span><br><span class="line">または</span><br><span class="line"></span><br><span class="line">$ hexo clean &amp;&amp; hexo d -g</span><br></pre></td></tr></table></figure><p>というように<code>hexo clean</code>を実行してからジェネレート・デプロイするという方法です。</p><p>これで解決できればいいのですが、どうしても解決できないケースがあったので、書き留めておきます。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#cloudflareのキャッシュが原因だった">CLOUDFLAREのキャッシュが原因だった</a></li><li><a href="#cloudflareのキャッシュのクリア方法">CLOUDFLAREのキャッシュのクリア方法</a></li></ul><!-- tocstop --></div><h2><span id="cloudflareのキャッシュが原因だった">CLOUDFLAREのキャッシュが原因だった</span></h2><p>Hexoユーザーは、<strong>Netlify</strong>を使っている方が多いのではないでしょうか？</p><a href="https://app.netlify.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img></div><div class="descriptions"><div class="og-title">Netlify App</div></div></div></a><p>このブログも最初はNetlifyに置いていましたが、ブログ運営上一部都合の悪い箇所（こちら都合）があったので、今は<strong>CLOUDFLARE</strong>を使って高速化を求めながらブログ運営をしています。<br>当方都合が解決できればNetlifyに戻りたいです。（Netlifyは速いし機能豊富ですからね）</p><a href="https://www.cloudflare.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://www.cloudflare.com/img/network-map/network-map-gradient.png"></div><div class="descriptions"><div class="og-title">Cloudflare - The Web Performance &amp; Security Company | Cloudflare </div><div class="og-description">Here at Cloudflare, we make the Internet work the way it should. Offer…</div></div></div></a><p>CLOUDFLAREはNetlifyほど高速ではない感じですが、それでもキャッシュ機能などは有効に効いてサイトの高速化に役立っています。</p><p>さて、本題に戻りますが、HexoでCSSが反映されないという問題、このブログの場合、このCLOUDFLAREのキャッシュが原因でした。</p><p>CLOUDFLAREのキャッシュに溜め込まれたスタイルシートを延々と読み込んでいたため、いくら<code>hexo clean</code>を実行してもCSSが反映されないというオチでした。</p><p>時間が経てば反映されるのでしょうが、レイアウト崩れなどの緊急のCSS修正はすぐに反映させたいところです。</p><h2><span id="cloudflareのキャッシュのクリア方法">CLOUDFLAREのキャッシュのクリア方法</span></h2><p>CLOUDFLAREにログインして、上の<strong>Caching</strong>のアイコンをクリックします。</p><p>今回は、CSSファイルのキャッシュだけをクリアしたいので、下の画像の赤枠<strong>Custom Purge</strong>ボタンを押します。</p><p><img src="/images/hexo-css-not-reflected-cloudflare-1.webp" alt></p><p>続いて、キャッシュしたいファイル（ページ）のURLを入力し、<strong>Purge</strong>ボタンを押します。</p><p><img src="/images/hexo-css-not-reflected-cloudflare-2.webp" alt></p><p>これでキャッシュがクリアされ、即時にCSSが反映されるようになります。</p><p>HexoのCSSが反映されないという問題の解決までは時間がかかりましたが、原因がわかれば対処は一瞬でした。</p><p>これでまたHexoを気持ちよく使い続けられるようになりました。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/hexo-css-not-reflected-cloudflare.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Hexoでテンプレートをカスタマイズした後、ジェネレートして、デプロイした時にCSSが本番サイトに反映されないというのは、結構Hexo
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Hexo" scheme="https://lancers.work/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>自宅サーバー初心者が悩むメールサーバーとDNSサーバー対策</title>
    <link href="https://lancers.work/my-home-server-mail-dns/"/>
    <id>https://lancers.work/my-home-server-mail-dns/</id>
    <published>2019-04-14T09:24:00.000Z</published>
    <updated>2019-04-17T23:47:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/my-home-server-mail-dns.webp" alt></p><p>初めて、自宅サーバーを構築する人が最初に悩むところとして、</p><ul><li>メールサーバーの構築が面倒かつ自分の技術じゃセキュリティ的に不安！</li><li>自宅サーバーを作り直すたびにメールが消えてしまわないか不安！</li><li>DNSサーバーを立てるの？DNSサーバー構築は大変そう！DDNSサービスを使う？</li></ul><p>の3点があるのではないでしょうか？</p><p>慣れればメールサーバーやDNSサーバーの構築の壁も下がりますが、最初のうちは、サーバーを作っては壊し作っては壊し、Linuxディストリビューションを変えたり戻したりの試行錯誤だと思います。</p><p>そこで、この3点に悩まず苦労せず、自宅サーバーを引っ越してもやめてもメールを紛失することなく運用できる方法のヒントを自宅サーバー初心者の方のために書いてみたいと思います。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#さくらのメールボックスによるメールサーバー代替策">さくらのメールボックスによるメールサーバー代替策</a><ul><li><a href="#さくらのレンタルサーバープランメールボックス">さくらのレンタルサーバープラン：メールボックス</a></li></ul></li><li><a href="#dnsサーバーの大対策とさくらのメールボックスとの連携">DNSサーバーの大対策とさくらのメールボックスとの連携</a><ul><li><a href="#ムームーdns-aレコードの設定">ムームーDNS Aレコードの設定</a></li><li><a href="#ムームーdnsでさくらのメールボックスのmxレコードを設定">ムームーDNSでさくらのメールボックスのMXレコードを設定</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="さくらのメールボックスによるメールサーバー代替策">さくらのメールボックスによるメールサーバー代替策</span></h2><p>独自ドメインを取得したら、メールも独自ドメインで送受信したいところです。</p><p>しかし、</p><ul><li>メールサーバーの構築は難しい</li><li>自宅サーバーが壊れたら送受信したメールはどうなる？</li></ul><p>という心配が自宅サーバー初心者の方にはあると思います。</p><p>そこでこれらの解決策として「<strong>さくらのメールボックス</strong>」を使います。</p><p>「さくらのメールボックス」は独自ドメインのメールが使えるメール専用プランです。</p><h3><span id="さくらのレンタルサーバープランメールボックス">さくらのレンタルサーバープラン：メールボックス</span></h3><p>「さくらのメールボックス」の詳細はこちらで確認してください。</p><p><a href="https://px.a8.net/svt/ejp?a8mat=35AW76+DYHVCI+D8Y+61JSH" target="_blank" rel="nofollow noopener noreferrer"> <img src="https://www29.a8.net/svt/bgt?aid=190304898844&amp;wid=001&amp;eno=01&amp;mid=s00000001717001015000&amp;mc=1" alt width="468" height="60" border="0"></a> <img src="https://www12.a8.net/0.gif?a8mat=35AW76+DYHVCI+D8Y+61JSH" alt width="1" height="1" border="0"></p><p>「さくらのメールボックス」は複数の独自ドメインを登録でき、メールアドレスの発行も無制限です。</p><p>（自宅サーバーの場合、メールアドレスを発行するのも気持ち的に大変だったりしませんか？）</p><p>さくらのメールボックスのWEBメールでのメール送受信はもちろん、普段使いのメールアドレスへの転送も可能ですので、非常に使い勝手がいいです。</p><p>また、一番の課題である、自宅サーバーが壊れたり、自宅サーバーの引っ越しなどの場合でも、メールサーバーの役割は「さくらのメールボックス」が代替してくれていますので安心です。</p><p>メールの紛失や遅延は起こりませんし、安心して自宅サーバーの再構築に取り掛かれます。</p><p>この安心感を<strong>月額約86円</strong>で利用できますので、これは使わない手はありません！</p><p>ということで、メールサーバー代替策は「さくらのメールボックス」に任せてしまいましょう。<br>（クラウドサーバーなどでメールサーバーの構築がスムーズに行かない場合も「さくらのメールボックス」による代替策は有効な手段です。）</p><h2><span id="dnsサーバーの大対策とさくらのメールボックスとの連携">DNSサーバーの大対策とさくらのメールボックスとの連携</span></h2><p>自宅サーバー初心者で悩ましい問題の一つにDNSの扱いがあります。</p><p>独自ドメインをどうやって自宅サーバに向けるかという問題です。</p><p>固定IPアドレスを持っていなければDDNSサービスを選択されるでしょう。<br>（固定IPアドレスでもDDNSサービスを利用できます。）</p><p>固定IPアドレスを持っていれば、自前のDNSサーバーを立てる、有償・無償のDNSを借りる、などいくつか方法はあります。</p><p>今回はムームードメインでドメインを取得した方に限りますが、一例として、<strong>ムームードメイン</strong>の<strong>ムームーDNS</strong>を利用してみます。</p><p>ムームーDNSとは、ムームードメインと自宅サーバーをつないでくれるサービスです。</p><p>他にも1つのドメインでムームードメイン系のサービスが使えるなど、色々なサービスを提供してくれています。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h3><span id="ムームーdns-aレコードの設定">ムームーDNS Aレコードの設定</span></h3><p><img src="/images/my-home-server-mail-dns-1.webp" alt></p><p>メニュー「<strong>ムームーDNS</strong>」→対象ドメイン「<strong>利用する</strong>」または「<strong>変更</strong>」ボタンを押して、上の画像のページに行きます。</p><p>最初に画像の赤枠欄に、自宅のIPアドレスを入力します。</p><p>サブドメイン欄は空白にします.<br>（*を入力すると正常に反映されない場合があります。）</p><p>種別は<strong>A</strong>です。</p><p>これで、ドメイン→自宅サーバーへの名前解決が完了します。</p><h3><span id="ムームーdnsでさくらのメールボックスのmxレコードを設定">ムームーDNSでさくらのメールボックスのMXレコードを設定</span></h3><p>ここで「さくらのメールボックス」に再び登場してもらいます。</p><p><img src="/images/my-home-server-mail-dns-2.webp" alt></p><p>さきほどムームーDNSに設定したAレコードの次に、メール関連のMXレコードを設定します。</p><ul><li>サブドメイン・・・空白</li><li>種別・・・MX</li><li>内容・・・「さくらのメールボックス」のホスト名（上の画像の青枠のホスト名:www<em>**</em>.sakura.ne.jp）</li><li>優先度・・・特に指定がなければ空白で大丈夫です（デフォルトで50になります。）</li></ul><p><strong>MXレコードは自宅サーバーのドメインではなく、「さくらのメールボックス」のドメインを登録することがポイントです。</strong></p><p>これにより、独自ドメインあてのメールは全て「さくらのメールボックス」へ届きますので、自宅サーバーの状態がどうであろう、メールの保全は担保されます。</p><p>以上、最低限AレコードとMXレコードを設定できたら「セットアップ情報変更」ボタンを押します。</p><p>最後に、「ネームサーバー設定変更」メニューから「ムームードメインのネームサーバ(ムームーＤＮＳ)を使用する」を選択し、保存すると数時間から数日中にDNSが浸透します。</p><p>ちなみに、自分のドメインのDNS名が、</p><ul><li>DNS01.MUUMUU-DOMAIN.COM</li><li>DNS02.MUUMUU-DOMAIN.COM</li></ul><p>になっていればOKです！</p><p>自分のドメインの情報を調べるのは↓のサイトがおすすめです。色々なドメインを検索できます。</p><a href="https://research.domaintools.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img></div><div class="descriptions"><div class="og-title">Whois Lookup, Domain Availability &amp; IP Search - DomainTools</div><div class="og-description">Research domain ownership with Whois Lookup: Get ownership info, IP ad…</div></div></div></a><p><a href="https://px.a8.net/svt/ejp?a8mat=35AW76+A94RUA+348+1C6TPD" target="_blank" rel="nofollow noopener noreferrer"> <img src="https://www27.a8.net/svt/bgt?aid=190304898620&amp;wid=001&amp;eno=01&amp;mid=s00000000404008094000&amp;mc=1" alt width="300" height="250" border="0"></a> <img src="https://www15.a8.net/0.gif?a8mat=35AW76+A94RUA+348+1C6TPD" alt width="1" height="1" border="0"></p><p>10数年前からサーバーを立てていますが、いつまでたってもメールサーバーとDNSサーバーは面倒もとい大変です。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/my-home-server-mail-dns.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;初めて、自宅サーバーを構築する人が最初に悩むところとして、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールサーバーの構築が面倒かつ自分の技術じゃセキュリティ的に不安！&lt;
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="自宅サーバー" scheme="https://lancers.work/tags/%E8%87%AA%E5%AE%85%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC/"/>
    
      <category term="メールサーバー" scheme="https://lancers.work/tags/%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC/"/>
    
      <category term="DNSサーバー" scheme="https://lancers.work/tags/DNS%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC/"/>
    
      <category term="さくらのメールボックス" scheme="https://lancers.work/tags/%E3%81%95%E3%81%8F%E3%82%89%E3%81%AE%E3%83%A1%E3%83%BC%E3%83%AB%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>KeystoneJS(Node.js)でブログ構築 -ubuntuサーバー完全版 -</title>
    <link href="https://lancers.work/nodejs-keystonejs-mongodb-ubuntu/"/>
    <id>https://lancers.work/nodejs-keystonejs-mongodb-ubuntu/</id>
    <published>2019-04-11T09:29:00.000Z</published>
    <updated>2019-04-17T23:47:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/nodejs-keystonejs-mongodb-ubuntu.webp" alt></p><p>このブログはHexoで作成した静的ブログです。</p><p>Hexoはガシガシ文章が書けて、簡単に公開でき、かつ静的HTMLということで非常に気に入っております。</p><p>そんなNode.js界のブログシステムですが、Node.jsにはKeystoneJSというCMSもあります。</p><a href="https://keystonejs.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img></div><div class="descriptions"><div class="og-title">KeystoneJS</div></div></div></a><p>個人的な感想では、ブログはHexo、KeystoneJSは動的データを処理できるため、WEbアプリの枠組みとして使おうかなと考えています。</p><p>本記事では、ubuntuにNode.jsをインストールし、KeystoneJSを公開するまでをまとめています。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#keystonejs構築環境">KeystoneJS構築環境</a></li><li><a href="#nodejsインストール">Node.jsインストール</a></li><li><a href="#mongodbインストール">MongoDBインストール</a></li><li><a href="#keystonejsインストール">KeystoneJSインストール</a></li><li><a href="#keystonejs起動">KeystoneJS起動</a></li><li><a href="#nodejsやkeystoneが起動しなくなったら">Node.jsやKeystoneが起動しなくなったら</a><ul><li><a href="#nodejsが起動しなくなった">Node.jsが起動しなくなった</a></li><li><a href="#keystonejsが起動しなくなった">KeystoneJSが起動しなくなった</a></li></ul></li><li><a href="#まとめ">まとめ</a></li></ul><!-- tocstop --></div><h2><span id="keystonejs構築環境">KeystoneJS構築環境</span></h2><ul><li>ubuntu18.04.1 LTS（最初CentOS7で作り始めましたがエラーが出まくりスッパリ切り替えました。 このブログの母体であるKUSANAGI仮想マシンに入れました。）</li><li>Node.js</li><li>KeystoneJS</li><li>MongoDB</li></ul><h2><span id="nodejsインストール">Node.jsインストール</span></h2><p>ubuntuのインストールは完了しているものとします。</p><p>デスクトップ版、Server版、お好みのものをご準備ください。</p><p>ubuntuをインストールしたてでcurlが入っていない場合は、次のようにインストールしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install -y curl</span><br></pre></td></tr></table></figure><p>curlの準備ができたら、下記コマンドでnodeをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>バージョン（v0.34.0）の部分は、</p><a href="https://github.com/creationix/nvm" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://avatars3.githubusercontent.com/u/89353?s=400&v=4"></div><div class="descriptions"><div class="og-title">creationix/nvm</div><div class="og-description">Node Version Manager - Simple bash script to manage multiple active no…</div></div></div></a><p>このページで確認して、適宜書き換えてください。</p><p>ここで一旦、SSHクライアントを切断し、再度SSH接続してから次のコマンドを入力しバージョン等を確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> -v nvm</span><br><span class="line">nvm</span><br><span class="line"></span><br><span class="line">$ node -v</span><br><span class="line">v10.15.3</span><br></pre></td></tr></table></figure><p>無事にNode.jsがインストールされました。</p><h2><span id="mongodbインストール">MongoDBインストール</span></h2><p>基本的に下記サイトの通りに行います。</p><a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-ubuntu/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="http://s3.amazonaws.com/info-mongodb-com/_com_assets/cms/mongodb-for-giant-ideas-bbab5c3cf8.png"></div><div class="descriptions"><div class="og-title">Install MongoDB Community Edition on Ubuntu — MongoDB Manual</div></div></div></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E162F504A20CDF15827F718D4B7C549A058F8B6B</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.1 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list</span><br><span class="line"></span><br><span class="line">$ sudo apt update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install -y mongodb-org-unstable</span><br><span class="line"></span><br><span class="line">$ sudo service mongod start</span><br></pre></td></tr></table></figure><p><code>apt-key</code>やバージョンなどは最新のものが上記のMongoDBサイトに記されていますので、そのままコピーしてきます。</p><p>KeystoneJSを次にインストールしますが、MongoDBが起動していないとエラーになりますので、忘れないうちにここで起動しておきます。</p><h2><span id="keystonejsインストール">KeystoneJSインストール</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g yo</span><br><span class="line"></span><br><span class="line">$ npm install -g generator-keystone</span><br><span class="line"></span><br><span class="line">$ mkdir nodejs-project</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> nodejs-project</span><br><span class="line"></span><br><span class="line">$ yo keystone</span><br></pre></td></tr></table></figure><p>yoとはYeomanのことで、Googleが中心となって開発を進めている簡単にWEBアプリの土台を作ってくれるものと思ってください。</p><p>このYeomanを使ってKeystoneJSを構築しています。</p><p><code>nodejs-project</code>は管理人が付けた適当なプロジェクト名ですので、任意の文字列に置換してください。</p><p><code>yo keystone</code>を実行すると、色々聞かれます。</p><p><img src="/images/nodejs-keystonejs-mongodb-ubuntu-1.webp" alt></p><p>基本的に、エンターキーでいいのですが、<strong>mailgun</strong>と<strong>Cloudinary</strong>（赤枠の箇所）は<code>No</code> <code>空白</code>で進めました。</p><p>メール送信をしてくれるmailgunについてはアカウントを持っていますので追々使っていきます。</p><p>※rootで<code>yo keystone</code>を実行するとエラーが出るかもしれませんので一般ユーザーで実行してみてください。</p><h2><span id="keystonejs起動">KeystoneJS起動</span></h2><p>KeystoneJSのインストール完了時、<code>To start your new website, run &quot;cd my-blog&quot; then &quot;node keystone&quot;.</code>のような親切な案内が表示されますので、ディレクトリを移動して<code>node</code>コマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-blog</span><br><span class="line">$ node keystone</span><br></pre></td></tr></table></figure><p><code>cd my-blog</code>の<code>my-blog</code>は<code>yo keystone</code>コマンド実行時のKeystoneJSをインストールする際の最初に聞かれる質問の回答文字列です。</p><p>問題なく起動すると次のような画面になります。</p><p><img src="/images/nodejs-keystonejs-mongodb-ubuntu-2.webp" alt></p><p>ubuntuサーバーの「ローカルIPアドレス:3000」にアクセスすると、</p><p><img src="/images/nodejs-keystonejs-mongodb-ubuntu-3.webp" alt></p><p>と、無事にKeystoneJSが起動しています。</p><h2><span id="nodejsやkeystoneが起動しなくなったら">Node.jsやKeystoneが起動しなくなったら</span></h2><p>Node.jsはforeverで永続的に稼働できますが、テスト段階やとりあえずNode.jsを試しているという方で、サーバーを再起動したらNode.jsなどが起動しなくなったという方のための、あまり正確でない解決策です。</p><h3><span id="nodejsが起動しなくなった">Node.jsが起動しなくなった</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment">##### SSHクライアント閉じる→開く #####</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">command</span> -v nvm</span><br><span class="line">nvm</span><br><span class="line"></span><br><span class="line">$ node -v</span><br><span class="line">v11.12.0 <span class="comment">##### 執筆中にバージョン上がりました（上の記事と違ってます。） #####</span></span><br></pre></td></tr></table></figure><h3><span id="keystonejsが起動しなくなった">KeystoneJSが起動しなくなった</span></h3><p>nodeプロジェクトのディレクトリに移動して、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node keystone</span><br></pre></td></tr></table></figure><p>を実行すると、再び<code>IPアドレス:3000</code>でアクセスできます。</p><h2><span id="まとめ">まとめ</span></h2><p>皆さんは、KeystoneJS派ですか？Hexo派ですか？WordPress派ですか？</p><p>ブログは長く文字を書いていく作業ですから、自分の使いやすい環境が一番ですね。</p><p>私はHexoを気に入っていますが、KeystoneJSで動的サイトを作りたいとも考えているので、本記事を書いてみました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/nodejs-keystonejs-mongodb-ubuntu.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;このブログはHexoで作成した静的ブログです。&lt;/p&gt;
&lt;p&gt;Hexoはガシガシ文章が書けて、簡単に公開でき、かつ静的HTMLということ
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="MongoDB" scheme="https://lancers.work/tags/MongoDB/"/>
    
      <category term="KeystoneJS" scheme="https://lancers.work/tags/KeystoneJS/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsでCSVファイルをダウンロード・ソート・保存する</title>
    <link href="https://lancers.work/nodejs-express-csv-download/"/>
    <id>https://lancers.work/nodejs-express-csv-download/</id>
    <published>2019-04-10T08:13:00.000Z</published>
    <updated>2019-04-17T23:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/nodejs-express-csv-download.webp" alt></p><p>ナンバーズアプリの元データをスクレイピングで行っているという記事を紹介しました。</p><a href="https://lancers.work/numbers-1/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers-1.jpg"></div><div class="descriptions"><div class="og-title">Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～</div><div class="og-description">※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER…</div></div></div></a><p>これはこれで良かったのですが、少し不具合が出て問題解決策を模索していたところ、ナンバーズの当選番号をCSVファイルで提供している公的サイトを見つけたので、CSVファイルをダウンロードして、ナンバーズの当選番号を取得するという仕様に変更しました。</p><p>Node.jsにおけるCSVファイルのダウンロードとデータの抽出、ナンバーズアプリのためのjsonファイル作成までのコードを備忘録のためサンプル的に置いておきます。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#expressのroutesindexjs">Expressの/routes/index.js</a><ul><li><a href="#必要なモジュール">必要なモジュール</a></li><li><a href="#csvファイル取得">CSVファイル取得</a></li><li><a href="#csvデータ取得">CSVデータ取得</a></li><li><a href="#抽選日を降順にソート">抽選日を降順にソート</a></li><li><a href="#jsonファイルの保存">jsonファイルの保存</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="expressのroutesindexjs">Expressの/routes/index.js</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(<span class="string">'express'</span>);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">var request = require(<span class="string">'request'</span>);</span><br><span class="line">var iconv = require(<span class="string">'iconv-lite'</span>);</span><br><span class="line">var fs = require(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">/* GET NUMBERS3 */</span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">function</span>(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  // ここの処理を本記事で解説しています。</span><br><span class="line"></span><br><span class="line">  res.send(<span class="string">'処理完了！！！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><h3><span id="必要なモジュール">必要なモジュール</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var request = require(<span class="string">'request'</span>);</span><br><span class="line">var iconv = require(<span class="string">'iconv-lite'</span>);</span><br><span class="line">var fs = require(<span class="string">'fs'</span>);</span><br></pre></td></tr></table></figure><ul><li>request: CSVファイルの取得に使うモジュール</li><li>iconv-lite: CSVファイルがSHIFT-JISだったので文字コードを変換するためのモジュール</li><li>fs: jsonファイル書き込みのためのモジュール</li></ul><h3><span id="csvファイル取得">CSVファイル取得</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var options = &#123;</span><br><span class="line">  url: <span class="string">'https://とあるサイト/numbers3.csv'</span>,</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request(options, <span class="keyword">function</span>(err, req, data) &#123;</span><br><span class="line"></span><br><span class="line">  // ここに後述のCSVデータの処理を記述</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>options</code>の書き方や項目、<code>request</code>の記述など色々あると思いますが、他のソースに流用しやすかったり見やすいように上のように書きました。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h3><span id="csvデータ取得">CSVデータ取得</span></h3><p>CSVファイルから取得するナンバーズのデータは、<strong>回分</strong>、<strong>抽選日</strong>、<strong>当選番号</strong>のみです。</p><p>今回のCSVファイルや必要なデータは単純で数が少なかったので、<a href="#必要なモジュール">必要なモジュール</a>で書いたとおり、CSV関係のモジュールは使わず処理しています。</p><p>もっとスマートで簡単な記述もあると思いますが、そのような処理に変更したらナレッジとして書きたいと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var winJson = []; // 取得データを格納する配列</span><br><span class="line"></span><br><span class="line">var line = data.split(<span class="string">"\n"</span>); 改行コードで1行ずつに分割</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(var i=1; i&lt;31; i++) &#123; // ナンバーズアプリでは直近30回分のみ必要です</span><br><span class="line"></span><br><span class="line">  var lineUtf8 = iconv.decode(line[i], <span class="string">"Shift_JIS"</span>); // 試行錯誤の結果、このタイミングでSHIFT-JISからUTF-8に変換</span><br><span class="line">  var array = lineUtf8.split(<span class="string">","</span>); // カンマ区切りでデータを分解し配列`array`に格納</span><br><span class="line"></span><br><span class="line">  var tit = array[0]; // 回分</span><br><span class="line">  var date = array[1]; // 抽選日</span><br><span class="line">  var win = array[3]; // 当選番号</span><br><span class="line"></span><br><span class="line">  winJson.push(&#123;tit, date, win&#125;); // Jsonファイル用に配列へ格納</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10～12行目でカンマで分割したCSVデータを取得していますが、実際には文字化け対策や余分な文字の削除など行っています。</p><p>この辺はCSVのモジュールを使ったり、文字エンコードをもっと丁寧に行えば解決するのかなと思っています。</p><h3><span id="抽選日を降順にソート">抽選日を降順にソート</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">winJson.sort(<span class="keyword">function</span>(a,b) &#123;</span><br><span class="line">  <span class="keyword">if</span>(a.date &gt; b.date) <span class="built_in">return</span> -1;</span><br><span class="line">  <span class="keyword">if</span>(a.date &lt; b.date) <span class="built_in">return</span> 1;</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>これは過去記事と変更ありません。</p><a href="https://lancers.work/numbers-2/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers-2.jpg"></div><div class="descriptions"><div class="og-title">Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～</div><div class="og-description">※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER…</div></div></div></a><h3><span id="jsonファイルの保存">jsonファイルの保存</span></h3><p>こちらも↑の過去記事と変更ありません。</p><p>配列<code>winJson</code>に格納したナンバーズ抽選・当選データを<code>fs.writeFile</code>でファイルに保存しています。</p><p>今回は非同期処理でデータ抽出完了の前にファイルが保存されてしまうという現象は起きません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(<span class="string">'fs'</span>);</span><br><span class="line">fs.writeFileSync(<span class="string">'numbers3.json'</span>, JSON.stringify(winJson));</span><br></pre></td></tr></table></figure><p>以上、ナンバーズアプリの元データ生成方法の変更の記事でした。</p><p>これはこれで行数も少なくスッキリしているので良しとしていますが、今後のためにモージュールや文字エンコードをもっと勉強してみようと思います。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/nodejs-express-csv-download.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;ナンバーズアプリの元データをスクレイピングで行っているという記事を紹介しました。&lt;/p&gt;
&lt;a href=&quot;https://lancers.wor
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
      <category term="アプリの素" scheme="https://lancers.work/categories/%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%A0/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Express" scheme="https://lancers.work/tags/Express/"/>
    
      <category term="CSV" scheme="https://lancers.work/tags/CSV/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsで国税庁法人番号システムWeb-APIを叩いてみる</title>
    <link href="https://lancers.work/nodejs-express-houjin-api/"/>
    <id>https://lancers.work/nodejs-express-houjin-api/</id>
    <published>2019-04-09T10:20:00.000Z</published>
    <updated>2019-04-17T23:47:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/nodejs-express-houjin-api.webp" alt></p><p>Node.jsで<strong>国税庁の法人番号公表サイトの法人番号システムWeb-API</strong>を利用してみたいと思います。</p><a href="http://www.houjin-bangou.nta.go.jp/webapi/#web-api03" class="link-preview" target="_blank" rel="nofollw"><div class="link-area"><div class="og-image"><img></div><div class="descriptions"><div class="og-title">法人番号システム Web-API｜国税庁法人番号公表サイト</div><div class="og-description">国税庁法人番号公表サイトで提供するWeb-API機能について説明しています。</div></div></div></a><p>法人番号システムWeb-APIのレスポンスはCSV形式とXML形式があります。</p><p>いまどきどちらもあれですが、XML形式がまだ多いことからXML形式でAPIのレスポンスを受け、処理してみたいと思います。</p><p>XMLをjson形式に変換するモジュールもありますが、今回はXMLのまま処理しています。</p><p>なお、Node.jsのフレームワークにはExpressを使っています。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#routesindexjs">/routes/index.js</a><ul><li><a href="#モジュール">モジュール</a></li><li><a href="#apiリクエストレスポンスコード解説">APIリクエスト＆レスポンスコード解説</a></li><li><a href="#実行結果">実行結果</a></li></ul></li><li><a href="#まとめ">まとめ</a></li></ul><!-- tocstop --></div><h2><span id="routesindexjs">/routes/index.js</span></h2><p>いきなりソースです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var express = require(<span class="string">'express'</span>);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">var request = require(<span class="string">'request'</span>);</span><br><span class="line">var cheerio = require(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line">var result = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">function</span>(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var options = &#123;</span><br><span class="line">    url: <span class="string">'https://api.houjin-bangou.nta.go.jp/4/name'</span>,</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      <span class="string">'id'</span>: <span class="string">'*************'</span>, // APIキー（事前に申請して取得の必要があります） </span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'トマト'</span>, // 検索ワード</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'12'</span> // 出力形式（XML）</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(options, <span class="keyword">function</span>(err, req, data) &#123;</span><br><span class="line">    $ = cheerio.load(data);</span><br><span class="line">    Object.keys($(<span class="string">"corporation"</span>)).forEach(<span class="keyword">function</span>(key) &#123;</span><br><span class="line">      var number = $(<span class="string">"corporateNumber"</span>).eq(key).text();</span><br><span class="line">      var name = $(<span class="string">"name"</span>).eq(key).text();</span><br><span class="line">      var post = $(<span class="string">"postCode"</span>).eq(key).text();</span><br><span class="line">      var pref = $(<span class="string">"prefectureName"</span>).eq(key).text();</span><br><span class="line">      var city = $(<span class="string">"cityName"</span>).eq(key).text();</span><br><span class="line">      var street = $(<span class="string">"streetNumber"</span>).eq(key).text();</span><br><span class="line">      result += key + <span class="string">' &gt;&gt;&gt; '</span> + number +<span class="string">' : '</span> + name + <span class="string">' : 〒'</span> + post + <span class="string">' '</span> +pref + city + street + <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res.send(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>書き終えてみるとこれだけのコードなのですが、パースやら非同期やらハマりまくり、紆余曲折の結果、上記のソースに一旦落ち着きました。</p><p>検索データの投入方法や結果の表示方法は仮ですので、XMLからデータを抽出する過程を忘れないために書いています。</p><h3><span id="モジュール">モジュール</span></h3><p><code>request</code>と<code>cheerio</code>です。</p><p>requestモジュールはGET/POST通信するためのモジュールです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install request --save</span><br></pre></td></tr></table></figure><p>cheerioモジュールはHTMLパーサです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio --save</span><br></pre></td></tr></table></figure><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h3><span id="apiリクエストレスポンスコード解説">APIリクエスト＆レスポンスコード解説</span></h3><p>11行目の<code>var options =</code>では、APIにリクエストするパラメータを設定しています。</p><p><code>qs</code>はGETクエリパラメータで、ここでは最小限の<code>APIキー</code>と<code>キーワード</code>と<code>レスポンス形式</code>を指定しています。</p><p>キーワード<code>トマト</code>はご愛嬌。</p><p>21行目<code>request(options, function(err, req, data) {</code>でAPIにアクセスしてレスポンスを<code>data</code>で受け取っています。</p><p>22行目<code>$ = cheerio.load(data);</code>で受け取った<code>data</code>をパースして<code>$</code>に格納しています。</p><p>以下、<code>forEach</code>で各データを取得しているのですが、ここがかなりハマりました。</p><p><code>for</code>、<code>each</code>、<code>async.each</code>等々試しましたが、膨大な量のXML解析のため解析処理が終わる前に最終データの格納が先行してしまったり、<code>key</code>ごとのデータが取得できなかったり（これは初心者あるある）と、なかなか思うようなデータ結果を取得できませんでした。</p><p>XMLからjsonに変換したほうが簡単ではないか？CSVのレスポンスを受け取ったほうが簡単ではないか？という試行もしましたが、今回はあえてXMLのパースにこだわりました。</p><p>ということで最終的には、<code>forEach</code>で回しながら<code>eq:(key)</code>を指定して個々のデータを順次取得するという方法に落ち着きました。</p><p>国税庁の法人番号公表サイトの法人番号システムWeb-APIでは、XMLの<code>&lt;corporation&gt;</code>以下に各法人データが格納されます。</p><p>ですので、<code>Object.keys($(&quot;corporation&quot;)).forEach(function(key) {</code>というように<code>&lt;corporation&gt;</code>以下のデータを順次取り出し、<code>key</code>値を指定しながら<code>var number = $(&quot;corporateNumber&quot;).eq(key).text();</code>（例：法人番号）として、データを取得しています。</p><p><code>result</code>は取得したデータを表示するためにまとめているだけです。</p><p>実際には取得したデータをMongoDBに入れたり、運営サイトに合わせた形に整形します。</p><h3><span id="実行結果">実行結果</span></h3><p><img src="/images/nodejs-express-houjin-api-1.webp" alt></p><p><code>http://localhost:3000</code>にアクセスすると上記のような結果が得られます。</p><h2><span id="まとめ">まとめ</span></h2><p>非同期処理ってなかなか慣れないと難しいです。</p><p>非同期させたい処理、同期させたい処理、データ量との兼ね合いなど、都度都度最善のコードを書くようになりたいです。</p><p>また、これからはAPIのレスポンスはjsonが増えてくると思いますので、レスポンスがjson形式のAPIについても確固たるコードを確立しておきたいと思います。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/nodejs-express-houjin-api.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Node.jsで&lt;strong&gt;国税庁の法人番号公表サイトの法人番号システムWeb-API&lt;/strong&gt;を利用してみたいと思います。&lt;/p&gt;
&lt;a
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Express" scheme="https://lancers.work/tags/Express/"/>
    
      <category term="API" scheme="https://lancers.work/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>vSphere ESXiでKUSANAGI Runs on Dockerを動かす &amp; 土台のubuntuのova化</title>
    <link href="https://lancers.work/esxi-kusanagi-runs-on-docker/"/>
    <id>https://lancers.work/esxi-kusanagi-runs-on-docker/</id>
    <published>2019-04-08T03:06:00.000Z</published>
    <updated>2019-04-17T23:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/esxi-kusanagi-runs-on-docker.webp" alt></p><p>超高速WordPress仮想マシンのKUSANAGI。</p><p>以前は、KUSANAGI（WordPress）でブログを書いたり、KUSANAGIのLAMP環境やWordPress上で動くWEBアプリを開発していましたが、今はNode.jsに切り替えてしまったので、ほとんどKUSANAGIを触ることはなくなりました。</p><p>とはいえ、クライアント様からのニーズにWordPressは多く、プロジェクトによってはKUSANAGIを動かしたりしています。</p><p>そこで、KUSANAGIをサクッと立ち上げるのにDockerは有効です。</p><p>本記事では<strong>KUSANAGI Runs on Docker</strong>（以下、KUSANAGI RoD）の導入手順をまとめておきたいと思います。</p><p>なお、ローカルの開発環境にはvSphere ESXiを利用しています。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#kusanagi-runs-on-docker">KUSANAGI Runs on Docker</a></li><li><a href="#kusanagi-runs-on-docker-導入手順">KUSANAGI Runs on Docker 導入手順</a><ul><li><a href="#ubuntu18041仮想マシン作成">ubuntu18.04.1仮想マシン作成</a></li><li><a href="#ovaファイルエクスポート">ovaファイルエクスポート</a></li></ul></li><li><a href="#docker-composeymlによるkusanagi-rod構築本題">docker-compose.ymlによるKUSANAGI RoD構築（本題）</a></li><li><a href="#まとめ">まとめ</a></li></ul><!-- tocstop --></div><h2><span id="kusanagi-runs-on-docker">KUSANAGI Runs on Docker</span></h2><p>docker-compose.ymlは公式のものを使わずに、karelie様が非常によくまとめてくれているものを参考にしました。</p><p>【公式】</p><a href="https://kusanagi.tokyo/cloud/kusanagi-runs-on-docker/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://kusanagi.tokyo/wp-content/themes/kusanagi/images/ogp.png"></div><div class="descriptions"><div class="og-title">KUSANAGI Runs on Docker – KUSANAGI</div><div class="og-description">超高速WordPress仮想マシン [高速化チューニング済みWordPressサーバ]</div></div></div></a><p>karelie様</p><a href="https://www.karelie.net/free-fast-wordpress-site/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://www.karelie.net/wp-content/uploads/free-fast-wordpress-site.png"></div><div class="descriptions"><div class="og-title">【第1回】GCPの無料枠でdev.toなみの爆速Wordpress環境を構築する（爆速は正義） | カレリエ</div><div class="og-description">GCPの無料枠でdev.toなみの爆速Wordpress環境を構築する方法を紹介する。巷で話題になっていたdev.toなみの爆速Wordpr…</div></div></div></a><h2><span id="kusanagi-runs-on-docker-導入手順">KUSANAGI Runs on Docker 導入手順</span></h2><h3><span id="ubuntu18041仮想マシン作成">ubuntu18.04.1仮想マシン作成</span></h3><p>karelie様のKUSANAI RoDは1台のubuntuサーバーでいくつものKUSANAGIを動かせるようになっています。素晴らしい！！！</p><p>そうは言ってもサーバーの性能にも限界がありますので、10個近くのKUSANAGIを動かしたら別のubuntuサーバーでKUSANAGIを動かしていますが、その際ネックになるのが、ubuntuのインストールと初期設定です。</p><p>KUSANAGIマシンが増えるたびに一から土台となるubuntuサーバーを構築するのは大変というか面倒です。</p><p>そこで、KUSANAGI RoDを動かす上で必要な標準設定まで含んだubuntuを以下のように作成して、vSphereでovaファイルとしてエクスポートしておいたものを使い回すことにします。</p><p>vSphere ESXiにubuntu18.04.1 Serverをインストールする詳細な手順は省略しますが、Server版のインストールで下記の画面が表示されたらDockerを選択してインストールしてしまいましょう。</p><p><img src="/images/esxi-kusanagi-runs-on-docker-1.webp" alt></p><p>Dockerを選択しなかった場合（し忘れた場合）は、後からdocker-ceとdocker-composeをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt install -y \</span></span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment">#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line">    add-apt-repository \</span><br><span class="line">    <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">    <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># apt update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># apt install -y docker-ce</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl status docker</span></span><br><span class="line">/** active (running)になっていることを確認 **/</span><br><span class="line"></span><br><span class="line">/** rootをdockerグループに追加 **/</span><br><span class="line"><span class="comment"># usermod -aG docker root</span></span><br></pre></td></tr></table></figure><p>少し戻りますが、rootでSSHから作業する場合、以下のようにrootのパスワードとrootによるSSH接続を許可しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo passwd root</span><br><span class="line"> ① 現在のユーザのパスワードを入力 </span><br><span class="line"> ② rootの新しいパスワードを入力 </span><br><span class="line"> ③ ②と同じパスワードを入力</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo su</span></span><br><span class="line"></span><br><span class="line">/** rootによるSSH許可 **/</span><br><span class="line"><span class="comment"># nano /etc/ssh/sshd_config</span></span><br><span class="line">（追記）PermitRootLogin yes</span><br><span class="line"><span class="comment"># systemctl restart sshd</span></span><br></pre></td></tr></table></figure><h3><span id="ovaファイルエクスポート">ovaファイルエクスポート</span></h3><p>ubuntu+Docker+SSHの環境がある程度整ったら、vSphere clientでOVFファイルにエクスポートします。</p><p>何度もubuntuの初期環境設定するのは面倒ですので、基本的なシステム構成ができたらOVFファイルで保存しておきましょう。</p><p>次回以降、Docker RoDを構築する際の土台はこのOVFファイルを利用してubuntu+Docker環境をサクッと構築して、その上にKUSANAGI RoDをのせると簡単です。</p><p>※Docker RoDでPULLするDcokerイメージをこの基本ubuntuに入れておいてもいいかもしれません。<br>（Dockerイメージのバージョンが上がると困るケースでは、Dockerイメージは時間がかかりますがその都度PULLしたほうがいいかもしれません。）</p><p><img src="/images/esxi-kusanagi-runs-on-docker-2.webp" alt></p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h2><span id="docker-composeymlによるkusanagi-rod構築本題">docker-compose.ymlによるKUSANAGI RoD構築（本題）</span></h2><p>公式のdocker-compose-ymlもわかりやすいですが、いろいろ改良してくれたkarelie様のファイル群でKUSANAGIを構築していきます。</p><p>ファイルや構築手順はkarelie様のサイトをご参照ください。</p><p><code>kusanagi-1</code>フォルダに入っている<code>docker-compose.yml</code>にphpMyAdminコンテナだけ追加させていただきましたので、そちらを公開します。</p><p><code>https://ローカルIPアドレス:指定ポート番号(下記の例では33066)</code>でphpMyAdminにアクセスできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  kusanagi-data:</span><br><span class="line">    container_name: kusanagi-1</span><br><span class="line">    image: busybox</span><br><span class="line">    restart: always</span><br><span class="line">    stdin_open: <span class="literal">true</span></span><br><span class="line">    tty: <span class="literal">true</span></span><br><span class="line">    volumes:</span><br><span class="line">      /etc/nginx/conf.d</span><br><span class="line">      /etc/httpd/conf.d</span><br><span class="line">      /etc/kusanagi.d</span><br><span class="line">      ./data:/home/kusanagi</span><br><span class="line">      /home/wordpress/uploads.ini:/usr/<span class="built_in">local</span>/etc/php/conf.d/uploads.ini</span><br><span class="line">    <span class="built_in">command</span>: /bin/sh</span><br><span class="line"></span><br><span class="line">  kusanagi-nginx:</span><br><span class="line">    image: primestrategy/kusanagi-nginx:1.10.0-1</span><br><span class="line">    environment:</span><br><span class="line">      VIRTUAL_HOST: lancers.hoge</span><br><span class="line">      VIRTUAL_PORT: 443</span><br><span class="line">      VIRTUAL_PROTO: https</span><br><span class="line">      LETSENCRYPT_HOST: lancers.hoge</span><br><span class="line">      LETSENCRYPT_EMAIL: mail-address@lancers.hoge</span><br><span class="line">      LETSENCRYPT_TEST: <span class="string">"false”</span></span><br><span class="line"><span class="string">      PROFILE: プロファイル名（KUSANAGIを設置するフォルダ名になります）</span></span><br><span class="line"><span class="string">      FQDN: lancers.hoge</span></span><br><span class="line"><span class="string">      WPLANG: ja</span></span><br><span class="line"><span class="string">      BCACHE: "</span>off”</span><br><span class="line">      FCACHE: <span class="string">"off”</span></span><br><span class="line"><span class="string">    volumes_from:</span></span><br><span class="line"><span class="string">      kusanagi-data</span></span><br><span class="line"><span class="string">    links:</span></span><br><span class="line"><span class="string">      kusanagi-php7:php</span></span><br><span class="line"><span class="string">    external_links:</span></span><br><span class="line"><span class="string">      mariadb:mysql</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      "</span>443”</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      common_link</span><br><span class="line"></span><br><span class="line">  kusanagi-php7:</span><br><span class="line">    image: kusanagi-php7</span><br><span class="line">    external_links:</span><br><span class="line">      mariadb:mysql</span><br><span class="line">    volumes_from:</span><br><span class="line">     kusanagi-data</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      common_link</span><br><span class="line"></span><br><span class="line">  kusanagi-phpmyadmin:</span><br><span class="line">    container_name: kusanagi-phpmyadmin</span><br><span class="line">    image: phpmyadmin/phpmyadmin:latest</span><br><span class="line">    external_links:</span><br><span class="line">      mariadb:mysql</span><br><span class="line">    environment:</span><br><span class="line">      PMA_ARBITRARY=1</span><br><span class="line">      PMA_HOST=mysql　<span class="comment"># 必ず「mysql」</span></span><br><span class="line">      PMA_USER=root</span><br><span class="line">      PMA_PASSWORD=rootパスワード</span><br><span class="line">    ports:</span><br><span class="line">      <span class="string">"33066:80"</span>　<span class="comment"># ポート33066は適宜変更</span></span><br><span class="line">    volumes_from:</span><br><span class="line">      kusanagi-data</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      common_link</span><br><span class="line"></span><br><span class="line">  networks:</span><br><span class="line">    common_link:</span><br><span class="line">      external: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>このdocker-compose.ymlでKUSANAGI RoDとphpMyAdminが立ち上がります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose -f /home/wordpress/kusanagi-1/docker-compose.yml up -d</span></span><br></pre></td></tr></table></figure><p>※事前にビルドやファイルの変更箇所などもありますが、詳細はkarelie様のこのページを御覧ください。</p><a href="https://www.karelie.net/free-fast-wordpress-site-kusanagi-docker/" class="link-preview" target="_blank" rel="nofollw"><div class="link-area"><div class="og-image"><img src="https://www.karelie.net/wp-content/uploads/free-fast-wordpress-site.png"></div><div class="descriptions"><div class="og-title">【第5回】GCPの無料枠でdev.toなみの爆速Wordpress環境を構築する（KUSANAGI Runs on Docker編） | カレリエ</div><div class="og-description">GCPの無料枠でdev.toなみの爆速Wordpress環境を構築するが公式ページで掲載されているインストール方法だと様々な問題があり実用的…</div></div></div></a><p>一度KUSANAGI RoDを立ち上げた環境から複数のKUSANAGI RoDを立ち上げる場合は、</p><ul><li>container_name: kusanagi-1</li><li>LETSENCRYPT_HOST: lancers.hoge</li><li>PROFILE: プロファイル名</li><li>FQDN: lancers.hoge</li></ul><p>この箇所を<code>kusanagi-2</code>に変更したり、新しいドメインに合わせてFQDNを書き換、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f /home/wordpress/kusanagi-2/docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>とすれば2つ目のKUSANAGI RoDが簡単に立ち上がります。</p><h2><span id="まとめ">まとめ</span></h2><p>いかがでしたでしょうか。</p><p>自分で開発環境やサーバーを構築される方は何度もOSをインストールした経験があると思います。</p><p>KUSANAGI RoDは一つのサーバーにいくつでも構築できますので、KUSANAGI用途でそうそうサーバーを一から構築したり増やしたりすることは無いと思いますが、今回の記事に限らず、ご自身の標準機能を実装させた土台のOSをovaファイルで持っておくことは何かと便利かと思います。</p><p>そしてKUSANAGI RoDは本当に便利です。</p><p>KUSANAGIがDockerに対応してくれているおかげで自宅サーバーでもGCPでも、Dockerを動かせる環境があれば、どこでもKUSANAGIを走らせることができます。</p><p>管理人は徐々にNode.jsに移行していますが、まだまだWordPressの勢いは衰えないと思いますので、Node.jsの勉強をしつつ、KUSANAGIも忘れないようにしていこうと思います。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/esxi-kusanagi-runs-on-docker.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;超高速WordPress仮想マシンのKUSANAGI。&lt;/p&gt;
&lt;p&gt;以前は、KUSANAGI（WordPress）でブログを書いたり、KUSA
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="KUSANAGI" scheme="https://lancers.work/tags/KUSANAGI/"/>
    
      <category term="Docker" scheme="https://lancers.work/tags/Docker/"/>
    
      <category term="Esxi" scheme="https://lancers.work/tags/Esxi/"/>
    
      <category term="仮想化" scheme="https://lancers.work/tags/%E4%BB%AE%E6%83%B3%E5%8C%96/"/>
    
      <category term="ubuntu" scheme="https://lancers.work/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-&gt;GitHub-&gt;Netlifyで静的サイトを公開する方法をわかりやすく解説</title>
    <link href="https://lancers.work/hexo-github-netlify-deploy/"/>
    <id>https://lancers.work/hexo-github-netlify-deploy/</id>
    <published>2019-04-06T22:59:00.000Z</published>
    <updated>2019-04-17T23:47:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hexo-github-netlify-deploy.webp" alt></p><p>これまで社内サーバーにKUSANAGI仮想マシンを置いて、その中でNode.jsの開発、このブログの執筆を行い、公開していました。</p><p>開発環境は快適で、ブログの公開もデプロイ？SSL？なんて考えず、KUSANAGI配下で簡単に行っていました。</p><a href="https://lancers.work/hexo-on-kusanagi/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/hexo-on-kusanagi.jpg"></div><div class="descriptions"><div class="og-title">KUSANAGIのLAMP環境にHexoを構築</div><div class="og-description">まだHexoでブログを書き始めたばかりで、正直Node.jsでのWEBアプリ開発はまだ本格的に始めていません。 HexoはNode.jsをほ…</div></div></div></a><p>しかし、如何せん弱小回線のため、このブログのGoogleの<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a>では<strong>遅い！</strong>とお叱りを受けていました（泣）</p><p>そこで高機能でパフォーマンスが優れていて、Hexoユーザー御用達の無料ホスティングサービス<a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a>に移行することにしました。</p><p>結果から言いますとPageSpeed Insightsのスコアは激的に改善されました。</p><p>引っ越しにあたりましていくつかのサイトを参考にさせてもらいましたが、少々ややこしく書かれていたり、もっと単純かつ簡単にNetlifyにデプロイ（配置）できましたので、そのあたりをまとめておきたいと思います。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#前段">前段</a></li><li><a href="#hexoの設定">Hexoの設定</a><ul><li><a href="#_configymlの設定">_config.ymlの設定</a></li><li><a href="#プラグインのインストール">プラグインのインストール</a></li></ul></li><li><a href="#githubへのデプロイ">GitHubへのデプロイ</a></li><li><a href="#netlifyにデプロイ">Netlifyにデプロイ</a></li><li><a href="#https化">HTTPS化</a></li><li><a href="#まとめ">まとめ</a></li></ul><!-- tocstop --></div><h2><span id="前段">前段</span></h2><p>この記事を読んでいる方は、</p><ul><li>既にHexoでブログを書いている</li><li>GitHubのアカウントを既に持っている</li></ul><p>という方を対象にしています。</p><p>Node.jsやHexoのインストール方法などは、当ブログの記事や皆さんの記事を参考にしてください。</p><a href="https://lancers.work/hexo-nodejs-blog/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/hexo-start-nodejs.jpg"></div><div class="descriptions"><div class="og-title">Hexo（node.js）で静的ブログを構築してみる</div><div class="og-description">もともとは、超高速WordPress仮想マシン「KUSANAGI」でWEBアプリを量産しようということで、KUSANAGIでブログを書いてい…</div></div></div></a><h2><span id="hexoの設定">Hexoの設定</span></h2><h3><span id="_configymlの設定">_config.ymlの設定</span></h3><figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/your-git-account/your-repository.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>ブログ本体（Themes内ではなく）の<code>_config.yml</code>の<code># Deployment</code>の箇所に上記のように記述します。</p><p>予め、リポジトリ（空でOK）を作成しておき、gitのURLをrepo欄に記述します。<br>（私はprivateなリポジトリを作成しました。）</p><p>同じ<code>_config.yml</code>にURLを記述する箇所がありますが、ここは、<strong>GitHub Pagesにブログを公開するわけではない</strong>ので、GitHub PagesのURLを記述せず、独自ドメインや今まで入力してあった内容のままで大丈夫です。</p><figure class="highlight bash"><figcaption><span>このブログの例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: https://lancers.work</span><br><span class="line">root: /</span><br><span class="line">permalink: :title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h3><span id="プラグインのインストール">プラグインのインストール</span></h3><figure class="highlight bash"><figcaption><span>git デプロイプラグイン</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-deployer-git</span><br></pre></td></tr></table></figure><p>hexoブログの設定はここまでです。</p><h2><span id="githubへのデプロイ">GitHubへのデプロイ</span></h2><p>早速Netlifyに展開してきましょう。</p><p>まずは、静的HTMLを生成し、同時にHTMLソースをGitHubへデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>このコマンドだけで完了しますので、予め作成しておいたGitHubのリポジトリを見てみてください。</p><p>生成されたHTMLソースが登録されていると思います。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h2><span id="netlifyにデプロイ">Netlifyにデプロイ</span></h2><p><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a>にGitHubアカウントでログインします。</p><p><img src="/images/netlify-1.webp" alt></p><p><strong>New site from Git</strong>ボタンを押します。</p><p><img src="/images/netlify-2.webp" alt></p><p><strong>GitHub</strong>ボタンを押します。</p><p><img src="/images/netlify-3.webp" alt></p><p>先程作ったGitHubのリポジトリを選択します。<br>（この画面に辿り着く前に、どのリポジトリを登録するかの画面があると思いますが私はallを選択しました。キャプチャ漏れすいません。）</p><p><img src="/images/netlify-4.webp" alt></p><p><strong>Deploy site</strong>ボタンを押してNetlifyにデプロイします。</p><p>ポイントは<code>Build command</code>も<code>Publish directory</code>も未入力にすることです。</p><p><img src="/images/netlify-5.webp" alt></p><p>無事デプロイされると<code>https://hogehoge-hoge-e38e39.netlify.com/</code>のような一時的なURLが示され、ブログが表示されます。</p><p>独自ドメインを設定される場合は、<strong>Domain management</strong>メニューからドメインを登録して、DNSサーバーにNetlifyが示したAレコードを設定します。</p><h2><span id="https化">HTTPS化</span></h2><p><img src="/images/netlify-6.webp" alt></p><p>この記事の投稿時点ではまだDNSが浸透していないので、HTTPS化されていないと思いますが、上記画像のボタンを押すだけでSSL化が完了します。</p><h2><span id="まとめ">まとめ</span></h2><p>上記までの作業で後は、</p><p>1 Hexoでブログを書く</p><p>2 <code>hexo d -g</code>コマンドを実行する</p><p>の繰り返しでGitHubを意識せず、Netlifyに自動的にデプロイされます。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/hexo-github-netlify-deploy.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;これまで社内サーバーにKUSANAGI仮想マシンを置いて、その中でNode.jsの開発、このブログの執筆を行い、公開していました。&lt;/p&gt;
&lt;p&gt;開
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Hexo" scheme="https://lancers.work/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://lancers.work/tags/GitHub/"/>
    
      <category term="Netlify" scheme="https://lancers.work/tags/Netlify/"/>
    
  </entry>
  
  <entry>
    <title>ナンバーズ4アプリ ～ Node.jsベース ～</title>
    <link href="https://lancers.work/numbers4/"/>
    <id>https://lancers.work/numbers4/</id>
    <published>2019-04-05T05:39:00.000Z</published>
    <updated>2019-04-17T23:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://lancers.work/numbers3/">ナンバーズ3アプリはこちら</a></p><h2><span id="ナンバーズ4-過去回の当選数字">ナンバーズ4 過去<span class="selected-tit"></span>回の当選数字</span></h2><p>集計回数：<select id="tit"></select></p><table id="win-result"></table><h2><span id="ナンバーズ4-過去回の当選数字出現回数">ナンバーズ4 過去<span class="selected-tit"></span>回の当選数字出現回数</span></h2><table id="win-count"></table><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#ナンバーズアプリについて">ナンバーズアプリについて</a><ul><li><a href="#はじめに">はじめに</a></li><li><a href="#ナンバーズ4アプリの使い方">ナンバーズ4アプリの使い方</a></li><li><a href="#ナンバーズ4予想-実験方法">ナンバーズ4予想 実験方法</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="ナンバーズアプリについて">ナンバーズアプリについて</span></h2><h3><span id="はじめに">はじめに</span></h3><p>本アプリで使用しているナンバーズの当選番号データは、Node.jsで作成したWEBアプリでスクレイピングにより取得しています。<br>（スクレイピンは抽選日に1回行っています。スクレイピングをする際は対象サイトに迷惑をかけないように行いましょう。）</p><p>Node.jsアプリのエッセンスは下記記事に書いています。</p><a href="https://lancers.work/numbers-1/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers-1.jpg"></div><div class="descriptions"><div class="og-title">Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～</div><div class="og-description">※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER…</div></div></div></a><a href="https://lancers.work/numbers-2/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers-2.jpg"></div><div class="descriptions"><div class="og-title">Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～</div><div class="og-description">※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER…</div></div></div></a><p>この静的ブログの本記事では、Node.jsで作成したデータを元に、WEBアプリっぽいものを作っています。</p><p>純粋なNode.jsアプリというより、Node.jsと連携して静的ブログでどこまで遊べるかを追求しています。</p><p>とは言っても、ナンバーズを予想する手段としては十分活用できると思いますのでご利用ください。</p><h3><span id="ナンバーズ4アプリの使い方">ナンバーズ4アプリの使い方</span></h3><p>ナンバーズ4の直近回から過去30回までの当選番号、出現回数を調べることができます</p><p>集計回数を絞り込むと下段の「当選数字出現回数」も自動的に集計し直されます。</p><h3><span id="ナンバーズ4予想-実験方法">ナンバーズ4予想 実験方法</span></h3><p>某テレビ番組で「月の最初の2週間の当選数字」に出現していない数字を中心に残り2週間ナンバーズを買い続けるという必勝法が紹介されていました。<br>※テレビ放映では当選確率100％と言っていて、本当に当選していました。（購入口数もそれなりに必要だったみたいですが・・・）</p><p>本アプリでは、この放映内容を元に直近2週間分（10回分）の当選数字を集計して、どの数字が出ていないかチェックすることができます。</p><p>具体的な購入数字の組み合わせはこのアプリでは提供されませんので、このアプリの先からはあなたの運におまかせします！</p><p>ナンバーズは偏りはあるものの所詮確率論と考えていますので、最終的にはすべての組み合わせ・数字が等しく出現するハズとの考え方を尊重しています。</p><p><a href="https://lancers.work/numbers3/">ナンバーズ3アプリはこちら</a></p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><style>#tit {font-size: large;} #win-result th, #win-result td {text-align: center; width: 25%;}</style><script>function createTable(c) {var t = '<tr><th>回分</th><th>回別</th><th>抽選日</th><th>当選数字</th></tr>';var ca = [];$.getJSON('../../json/numbers4.json', function(d) {for(var i=0; i<c; i++) {var num = Number(i) + 1;t += '<tr><td>'+num+'</td><td>'+d[i].tit+'</td><td>'+d[i].date+'</td><td>'+d[i].win+'</td></tr>';ca.push(strToArray(d[i].win));}$('#win-result').append(t);t = makeCountTable(ca);$('#win-count').append(t);});$('.selected-tit').text(c);}function makeCountTable(c) {var ct = countNumber(c);ct.sort(function(a,b) {if(a.count < b.count) return -1;if(a.count > b.count) return 1;return 0;});var t = '<tr><th width="50%">当選数字（出現回数少ない順）</th>';ct.forEach(function(d) {t += '<th width="5%">'+d.num+'</th>';});t += '</tr><tr><td width="50%">出現回数</td>';ct.forEach(function(d) {t += '<td width="5%">'+d.count+'</td>';});t += '<tr>';return t;}function strToArray(s) {var s1 = s.split('');var a = [];s1.forEach(function(d) {a.push(d);});return a;}function countNumber(a) {var c = [0,0,0,0,0,0,0,0,0,0];a.forEach(function(d1) {d1.forEach(function(d2) {c[d2]++;});});var r = [];for(var i=0; i<10; i++) {r.push({"num":i, "count":c[i]})}return r;}$(function() {$('#tit').on('change', function() {$('#win-result tr').remove();$('#win-count tr').remove();var t = $('#tit').val();createTable(t);});});$(function() {var base = 10;for(var i=1; i<31; i++) {if(i == base) {var s = ' selected';} else {var s = '';}$('#tit').append('<option value="'+i+'"'+s+'>過去'+i+'回分</option>');}createTable(base);});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://lancers.work/numbers3/&quot;&gt;ナンバーズ3アプリはこちら&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;ナンバーズ4-過去回の当選数字&quot;&gt;ナンバーズ4 過去&lt;span class=&quot;selected-tit&quot;&gt;&lt;/span&gt;
      
    
    </summary>
    
      <category term="アプリ" scheme="https://lancers.work/categories/%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Express" scheme="https://lancers.work/tags/Express/"/>
    
      <category term="jQuery" scheme="https://lancers.work/tags/jQuery/"/>
    
      <category term="ナンバーズ" scheme="https://lancers.work/tags/%E3%83%8A%E3%83%B3%E3%83%90%E3%83%BC%E3%82%BA/"/>
    
  </entry>
  
  <entry>
    <title>ナンバーズ3アプリ ～ Node.jsベース ～</title>
    <link href="https://lancers.work/numbers3/"/>
    <id>https://lancers.work/numbers3/</id>
    <published>2019-04-05T05:39:00.000Z</published>
    <updated>2019-04-17T23:48:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://lancers.work/numbers4/">ナンバーズ4アプリはこちら</a></p><h2><span id="ナンバーズ3-過去回の当選数字">ナンバーズ3 過去<span class="selected-tit"></span>回の当選数字</span></h2><p>集計回数：<select id="tit"></select></p><table id="win-result"></table><h2><span id="ナンバーズ3-過去回の当選数字出現回数">ナンバーズ3 過去<span class="selected-tit"></span>回の当選数字出現回数</span></h2><table id="win-count"></table><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#ナンバーズアプリについて">ナンバーズアプリについて</a><ul><li><a href="#アプリの作成にあたって">アプリの作成にあたって</a></li><li><a href="#ナンバーズ3アプリの使い方">ナンバーズ3アプリの使い方</a></li><li><a href="#ナンバーズ3予想-実験方法">ナンバーズ3予想 実験方法</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="ナンバーズアプリについて">ナンバーズアプリについて</span></h2><h3><span id="アプリの作成にあたって">アプリの作成にあたって</span></h3><p>本アプリで使用しているナンバーズの当選番号データは、Node.jsで作成したWEBアプリでスクレイピングにより取得しています。<br>（スクレイピンはナンバーズ抽選日に1回行っています。スクレイピングをする際は対象サイトに迷惑をかけないように行いましょう。）</p><p>なおNode.jsアプリのエッセンスは下記記事に書いています。</p><a href="https://lancers.work/numbers-1/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers-1.jpg"></div><div class="descriptions"><div class="og-title">Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～</div><div class="og-description">※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER…</div></div></div></a><a href="https://lancers.work/numbers-2/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers-2.jpg"></div><div class="descriptions"><div class="og-title">Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～</div><div class="og-description">※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER…</div></div></div></a><p>そのNode.jsでアプリと連携させつつ、この静的ブログでWEBアプリっぽいものを作ってみようの第一弾です。</p><p>簡単なアプリですがナンバーズ予想のお役には十分立てると思います。</p><p>ご利用は無料ですので、ナンバーズ予想にお気軽に使ってみてください。</p><h3><span id="ナンバーズ3アプリの使い方">ナンバーズ3アプリの使い方</span></h3><p>ナンバーズ3の直近回から過去30回までの当選番号、出現回数を調べることができます</p><p>集計回数を絞り込むと下段の「当選数字出現回数」も自動的に集計し直されます。</p><h3><span id="ナンバーズ3予想-実験方法">ナンバーズ3予想 実験方法</span></h3><p>某テレビ番組で「月の最初の2週間の当選数字」に出現していない数字を中心に残り2週間ナンバーズを買い続けるという必勝法が紹介されていました。<br>※テレビ放映では当選確率100％と言っていて、本当に当選していました。（購入口数もそれなりに必要だったみたいですが・・・）</p><p>本アプリでは、この放映内容を元に直近2週間分（10回分）の当選数字を集計して、どの数字が出ていないかチェックすることができます。</p><p>具体的な購入数字の組み合わせはこのアプリでは提供されませんので、このアプリの先からはあなたの運におまかせします！</p><p>ナンバーズは偏りはあるものの所詮確率論と考えていますので、最終的にはすべての組み合わせ・数字が等しく出現するハズとの考え方を尊重しています。</p><p><a href="https://lancers.work/numbers4/">ナンバーズ4アプリはこちら</a></p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><style>#tit {font-size: large;} #win-result th, #win-result td {text-align: center; width: 25%;}</style><script>function createTable(c) {var t = '<tr><th>回分</th><th>回別</th><th>抽選日</th><th>当選数字</th></tr>';var ca = [];$.getJSON('../../json/numbers3.json', function(d) {for(var i=0; i<c; i++) {var num = Number(i) + 1;t += '<tr><td>'+num+'</td><td>'+d[i].tit+'</td><td>'+d[i].date+'</td><td>'+d[i].win+'</td></tr>';ca.push(strToArray(d[i].win));}$('#win-result').append(t);t = makeCountTable(ca);$('#win-count').append(t);});$('.selected-tit').text(c);}function makeCountTable(c) {var ct = countNumber(c);ct.sort(function(a,b) {if(a.count < b.count) return -1;if(a.count > b.count) return 1;return 0;});var t = '<tr><th width="50%">当選数字（出現回数少ない順）</th>';ct.forEach(function(d) {t += '<th width="5%">'+d.num+'</th>';});t += '</tr><tr><td width="50%">出現回数</td>';ct.forEach(function(d) {t += '<td width="5%">'+d.count+'</td>';});t += '<tr>';return t;}function strToArray(s) {var s1 = s.split('');var a = [];s1.forEach(function(d) {a.push(d);});return a;}function countNumber(a) {var c = [0,0,0,0,0,0,0,0,0,0];a.forEach(function(d1) {d1.forEach(function(d2) {c[d2]++;});});var r = [];for(var i=0; i<10; i++) {r.push({"num":i, "count":c[i]})}return r;}$(function() {$('#tit').on('change', function() {$('#win-result tr').remove();$('#win-count tr').remove();var t = $('#tit').val();createTable(t);});});$(function() {var base = 10;for(var i=1; i<31; i++) {if(i == base) {var s = ' selected';} else {var s = '';}$('#tit').append('<option value="'+i+'"'+s+'>過去'+i+'回分</option>');}createTable(base);});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://lancers.work/numbers4/&quot;&gt;ナンバーズ4アプリはこちら&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;ナンバーズ3-過去回の当選数字&quot;&gt;ナンバーズ3 過去&lt;span class=&quot;selected-tit&quot;&gt;&lt;/span&gt;
      
    
    </summary>
    
      <category term="アプリ" scheme="https://lancers.work/categories/%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Express" scheme="https://lancers.work/tags/Express/"/>
    
      <category term="jQuery" scheme="https://lancers.work/tags/jQuery/"/>
    
      <category term="ナンバーズ" scheme="https://lancers.work/tags/%E3%83%8A%E3%83%B3%E3%83%90%E3%83%BC%E3%82%BA/"/>
    
  </entry>
  
  <entry>
    <title>VMware ESXi「No Network Adapters」エラー時の対処法</title>
    <link href="https://lancers.work/vmware-esxi65-realtek-nic/"/>
    <id>https://lancers.work/vmware-esxi65-realtek-nic/</id>
    <published>2019-04-04T02:10:00.000Z</published>
    <updated>2019-04-17T23:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/vmware-esxi65-realtek-nic.webp" alt></p><p>ESXiはINTEL NIC以外のネットワークアダプタを認識してくれない？！</p><p>使わないパソコンが3台あって、VMware vSphere Hypervisor ESXiを入れたところ、見事に3台とも「No Network Adapters」のグレー画面（キャプチャ撮り忘れた）が現れてインストールできず。</p><p>どうやらINTEL NIC以外のネットワークアダプタは認識しないようで、確かにINTEL製ではなかった。。。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#esxiのカスタムisoを作る">ESXiのカスタムISOを作る</a></li><li><a href="#esxi-customizer-ps-v260ps1はデジタル署名されていません">ESXi-Customizer-PS-v2.6.0.ps1はデジタル署名されていません。</a></li></ul><!-- tocstop --></div><h2><span id="esxiのカスタムisoを作る">ESXiのカスタムISOを作る</span></h2><p>先人の方々の教え通り、</p><ul><li>vSphere PowerCLI <a href="https://my.vmware.com/jp/group/vmware/details?productId=491&amp;downloadGroup=PCLI630R1" target="_blank" rel="noopener">VMware-PowerCLI-6.3.0-3737840.exe</a></li><li>ESXi-Customizer-PS <a href="https://www.v-front.de/p/esxi-customizer-ps.html" target="_blank" rel="noopener">ESXi-Customizer-PS-v2.6.0.ps1</a></li><li>Realtek NIC on vSphere 6 <a href="http://www.vdicloud.nl/2015/02/07/realtek-nic-on-vsphere-6/" target="_blank" rel="noopener">net51-drivers-1.0.0-1vft.510.0.0.799733.x86_64.vib</a></li></ul><p>をダウンロードして、CustomizerとRealtek NICドライバをC\:に置きます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ESXi-Customizer-PS-v2.6.0.ps1 -v65 -pkgDir C:\</span><br></pre></td></tr></table></figure><p>このようにコマンド実行すると、Realtek NIC入のESXi6.5のISOファイルが出来上がります。</p><p>ここまでの流れで、コマンド実行前にポリシー実行の設定を変えたりするのですが、一つつまずいた点がありました。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h2><span id="esxi-customizer-ps-v260ps1はデジタル署名されていません">ESXi-Customizer-PS-v2.6.0.ps1はデジタル署名されていません。</span></h2><p><img src="/images/vmware-esxi65-realtek-nic-1.webp" alt></p><p>ポリシー実行を変更しても、「ESXi-Customizer-PS-v2.6.0.ps1はデジタル署名されていません。」という冷たいお言葉が帰ってきました。</p><p>デジタル署名ってどうするの？</p><p>答えは簡単でした。</p><p><img src="/images/vmware-esxi65-realtek-nic-2.webp" alt></p><p>ESXi-Customizer-PS-v2.6.0.ps1のプロパティを開いて、赤枠の「許可する」にチェックを入れると上記のエラーメッセージは出なくなり、無事にISOファイルが作成できます。</p><p>ここだけの話、最初欲張って、Realtek NIC入りESXi6.7を下記コマンドで作ってみたのですが、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ESXi-Customizer-PS-v2.6.0.ps1 -v67 -pkgDir C:\</span><br></pre></td></tr></table></figure><p>警告の嵐で作成できませんでした。</p><p>ESXi6.7バージョンがほしい方はこちらのサイトが参考になりますので、お試しください。</p><a href="https://tech-mmmm.blogspot.com/2018/05/realteknicesxi-67.html" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://4.bp.blogspot.com/-Y-xjQu6JajQ/Wwie09q0KRI/AAAAAAAAUXM/RBA70tFxCtQRi0yk-ZW-Q1DSNGJVnd1BwCLcBGAs/w1200-h630-p-k-no-nu/004.png"></div><div class="descriptions"><div class="og-title">RealtekのNICのドライバーを組み込んだESXi 6.7のカスタムイメージを作成する</div><div class="og-description">インフラエンジニアの技術メモ。Zabbix / Raspberry Pi / QNAP / Windows Server / Linux /…</div></div></div></a><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/vmware-esxi65-realtek-nic.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;ESXiはINTEL NIC以外のネットワークアダプタを認識してくれない？！&lt;/p&gt;
&lt;p&gt;使わないパソコンが3台あって、VMware vSphere
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="仮想化" scheme="https://lancers.work/tags/%E4%BB%AE%E6%83%B3%E5%8C%96/"/>
    
      <category term="VMware" scheme="https://lancers.work/tags/VMware/"/>
    
      <category term="ESXi" scheme="https://lancers.work/tags/ESXi/"/>
    
  </entry>
  
  <entry>
    <title>WordPressクエリパラメータつきURLを静的URLにリライト ～ 完全版 ～</title>
    <link href="https://lancers.work/wordpress-custom-rewrite-rule/"/>
    <id>https://lancers.work/wordpress-custom-rewrite-rule/</id>
    <published>2019-04-03T22:55:00.000Z</published>
    <updated>2019-04-17T23:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/wordpress-custom-rewrite-rule.webp" alt></p><p>本記事の目的はWordPressでクエリ文字付き動的URLを静的URLにリライトし、クエリパラメータの値を取得することです。</p><p>WordPressの公式サイト通りに関数を追加したり、コードを書けばできますが、その他のページをさまよっていてすぐに実装できなかったのでまとめておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://kusanagi.lancers.work/food/?pref=hokkaido&amp;city=sapporo</span><br></pre></td></tr></table></figure><p>↑これを↓これにリライトし、クエリパラメータの値を取得します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://kusanagi.lancers.work/food/hokkaido/sapporo</span><br></pre></td></tr></table></figure><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#2つの関数追加">2つの関数追加</a><ul><li><a href="#1カスタムクエリ文字列変数の認識">１．カスタムクエリ文字列変数の認識</a></li><li><a href="#2ユーザーフレンドリーなカスタムurlを作成">２．ユーザーフレンドリーなカスタムURLを作成</a></li></ul></li><li><a href="#パーマリンクデータベースの更新最重要">パーマリンクデータベースの更新（最重要）</a></li><li><a href="#クエリの値を受け取る">クエリの値を受け取る</a></li></ul><!-- tocstop --></div><h2><span id="2つの関数追加">2つの関数追加</span></h2><p>テーマファイル内のfunctions.phpに次の2つの関数を追加します。</p><h3><span id="1カスタムクエリ文字列変数の認識">１．カスタムクエリ文字列変数の認識</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">custom_rewrite_tag</span></span>() &#123;</span><br><span class="line">    add_rewrite_tag(<span class="string">'%pref%'</span>, <span class="string">'([^&amp;]+)'</span>);</span><br><span class="line">    add_rewrite_tag(<span class="string">'%city%'</span>, <span class="string">'([^&amp;]+)'</span>);</span><br><span class="line">&#125;</span><br><span class="line">add_action(<span class="string">'init'</span>, <span class="string">'custom_rewrite_tag'</span>, 10, 0);</span><br></pre></td></tr></table></figure><p>ここでは<strong>prefやcityはクエリの文字列ですよ！</strong>とWordPressに認識させています。</p><p>クエリの文字列とは、例えば <code>https://kusanagi.lancers.work/food/?pref=hokkaido</code> の<strong>pref</strong>にあたります。</p><p><code>pref</code>や<code>city</code>以外の箇所は何も考えずコピペしてください。</p><h3><span id="2ユーザーフレンドリーなカスタムurlを作成">２．ユーザーフレンドリーなカスタムURLを作成</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">custom_rewrite_rule</span></span>() &#123;</span><br><span class="line">    add_rewrite_rule(<span class="string">'^food/([^/]*)/([^/]*)/?$'</span>, <span class="string">'index.php?page_id=固定ページの番号&amp;pref=$matches[1]&amp;city=$matches[2]'</span>, <span class="string">'top'</span>);</span><br><span class="line">&#125;</span><br><span class="line">add_action(<span class="string">'init'</span>, <span class="string">'custom_rewrite_rule'</span>, 10, 0);</span><br></pre></td></tr></table></figure><p>ここでは静的URLと動的URLの関連付けを行っています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_rewrite_rule(<span class="string">'^food/([^/]*)/([^/]*)/?$'</span></span><br></pre></td></tr></table></figure><p>今回は、クエリ文字がprefとcityの2つありますので、<code>/([^/])/([^/])/</code>のように記述します。</p><p>最初の()内がpref相当、次の()内がcityにあたります。クエリ文字の数だけ記述してください。</p><p>そして、クエリの値を受け取るのが、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'index.php?page_id=固定ページの番号&amp;pref=$matches[1]&amp;city=$matches[2]'</span></span><br></pre></td></tr></table></figure><p>の箇所になります。</p><p><code>$matches</code>は定義された名前ですので、<code>$matches</code>は修正せず、パラメータの数だけ、[1]、[2]、[3]・・・と振ってあげます。<br>※<code>$matches[1]</code>に最初のクエリパラメータの値が入りますので、0からでなく1から始めます。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h2><span id="パーマリンクデータベースの更新最重要">パーマリンクデータベースの更新（最重要）</span></h2><p><strong>この作業を忘れると、どんなに関数を追加しても反映されません。</strong></p><p>「設定」→「パーマリンク設定」で何も変更せずに「変更を保存」ボタンを押して、パーマリンクのデータベースを更新します。</p><p><img src="/images/wordpress-custom-rewrite-rule-1.webp" alt></p><h2><span id="クエリの値を受け取る">クエリの値を受け取る</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">global <span class="variable">$wp_query</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pref</span> = <span class="variable">$wp_query</span>-&gt;query_vars[<span class="string">'pref'</span>];</span><br><span class="line"><span class="variable">$city</span>= <span class="variable">$wp_query</span>-&gt;query_vars[<span class="string">'city'</span>];</span><br></pre></td></tr></table></figure><p>とすることで<code>pref</code>の値<code>hokkaido</code>を取得することができます。</p><p><code>city=sapporo</code>も同様に取得できます。</p><p>以上の流れで、WordPressの動的URLを静的URLに変換し、クエリパラメータの値を取得することができます。</p><p>WordPressのカスタムリライトが効かないというかたは、是非この順に沿って設定してみてください。</p><p>この記事がお役に立てるととても嬉しいです！</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/wordpress-custom-rewrite-rule.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;本記事の目的はWordPressでクエリ文字付き動的URLを静的URLにリライトし、クエリパラメータの値を取得することです。&lt;/p&gt;
&lt;p&gt;W
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="WordPress" scheme="https://lancers.work/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～</title>
    <link href="https://lancers.work/numbers-2/"/>
    <id>https://lancers.work/numbers-2/</id>
    <published>2019-04-03T09:40:00.000Z</published>
    <updated>2019-04-17T23:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/numbers-2.webp" alt></p><p>※Node.jsアプリ作成の共有コーナーです。<br>※Node.jsアプリ作成にはExpressを使用しています。</p><p>今回はナンバーズ（NUMBERS3 &amp; NUMBERS4）の超お役立ちアプリ（大げさ）作成に関するナレッジの続き第2回目です。</p><a href="https://lancers.work/numbers3/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers3.jpg"></div><div class="descriptions"><div class="og-title">ナンバーズ3アプリ ～ Node.jsベース ～</div><div class="og-description">ナンバーズ4アプリはこちら ナンバーズ3 過去回の当選数字  集計回数：   ナンバーズ3 過去回の当選数字出現回数      (adsby…</div></div></div></a><a href="https://lancers.work/numbers4/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers4.jpg"></div><div class="descriptions"><div class="og-title">ナンバーズ4アプリ ～ Node.jsベース ～</div><div class="og-description">ナンバーズ3アプリはこちら ナンバーズ4 過去回の当選数字  集計回数：   ナンバーズ4 過去回の当選数字出現回数      (adsby…</div></div></div></a><p>前回の記事はこちらです。</p><a href="https://lancers.work/numbers-1/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers-1.jpg"></div><div class="descriptions"><div class="og-title">Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～</div><div class="og-description">※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER…</div></div></div></a><p>今年の目標が<strong>Node.jsを極める！</strong>ですので、かなりの初心者コードですが、参考やヒラメキの一助になればと思い書いています。</p><p>今回でナンバーズアプリに関するナレッジは最終回です。</p><p>アプリが完成しましたら、公開していきたいと思います。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#配列のソート">配列のソート</a></li><li><a href="#jsonファイルの保存">jsonファイルの保存</a></li></ul><!-- tocstop --></div><h2><span id="配列のソート">配列のソート</span></h2><p><code>cheerio-httpcli</code>で取得した<code>回数</code>、<code>抽選日</code>、<code>当選番号</code>はそれぞれ<code>array.tit</code>、<code>array.date</code>、<code>array.win</code>に格納されています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"tit"</span>:[<span class="string">"第5104回"</span>,<span class="string">"第5105回"</span>,<span class="string">"第5106回"</span>,<span class="string">"第5107回"</span>,<span class="string">"第5108回"</span>,<span class="string">"第5109回"</span>,<span class="string">"第5110回"</span>,<span class="string">"第5111回"</span>,<span class="string">"第5112回"</span>,<span class="string">"第5113回"</span>,<span class="string">"第5114回"</span>,<span class="string">"第5115回"</span>,<span class="string">"第5116回"</span>,<span class="string">"第5117回"</span>,<span class="string">"第5118回"</span>,<span class="string">"第5119回"</span>,<span class="string">"第5120回"</span>,<span class="string">"第5121回"</span>,<span class="string">"第5122回"</span>,<span class="string">"第5123回"</span>],<span class="string">"date"</span>:[<span class="string">"2019/02/01"</span>,<span class="string">"2019/02/04"</span>,<span class="string">"2019/02/05"</span>,<span class="string">"2019/02/06"</span>,<span class="string">"2019/02/07"</span>,<span class="string">"2019/02/08"</span>,<span class="string">"2019/02/11"</span>,<span class="string">"2019/02/12"</span>,<span class="string">"2019/02/13"</span>,<span class="string">"2019/02/14"</span>,<span class="string">"2019/02/15"</span>,<span class="string">"2019/02/18"</span>,<span class="string">"2019/02/19"</span>,<span class="string">"2019/02/20"</span>,<span class="string">"2019/02/21"</span>,<span class="string">"2019/02/22"</span>,<span class="string">"2019/02/25"</span>,<span class="string">"2019/02/26"</span>,<span class="string">"2019/02/27"</span>,<span class="string">"2019/02/28"</span>],<span class="string">"win"</span>:[<span class="string">"049"</span>,<span class="string">"766"</span>,<span class="string">"322"</span>,<span class="string">"660"</span>,<span class="string">"626"</span>,<span class="string">"684"</span>,<span class="string">"077"</span>,<span class="string">"882"</span>,<span class="string">"087"</span>,<span class="string">"446"</span>,<span class="string">"771"</span>,<span class="string">"878"</span>,<span class="string">"991"</span>,<span class="string">"956"</span>,<span class="string">"831"</span>,<span class="string">"672"</span>,<span class="string">"661"</span>,<span class="string">"635"</span>,<span class="string">"663"</span>,<span class="string">"366"</span>]&#125;</span><br></pre></td></tr></table></figure><p>これらを最新日付順にソートし、<code>numbers</code>という名前の配列に入れ直します。</p><p>まず、<code>回数</code>と<code>抽選日</code>と<code>当選番号</code>を組み合わせます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0; i&lt;resJson.tit.length; i++) &#123;</span><br><span class="line">  var tit = arrayJson.tit[i];</span><br><span class="line">  var date = arrayJson.date[i];</span><br><span class="line">  var win = arrayJson.win[i];</span><br><span class="line">  numbers.push(&#123;tit, date, win&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この結果、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">"tit"</span>:<span class="string">"第5104回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/01"</span>,<span class="string">"win"</span>:<span class="string">"049"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5105回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/04"</span>,<span class="string">"win"</span>:<span class="string">"766"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5106回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/05"</span>,<span class="string">"win"</span>:<span class="string">"322"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5107回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/06"</span>,<span class="string">"win"</span>:<span class="string">"660"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5108回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/07"</span>,<span class="string">"win"</span>:<span class="string">"626"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5109回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/08"</span>,<span class="string">"win"</span>:<span class="string">"684"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5110回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/11"</span>,<span class="string">"win"</span>:<span class="string">"077"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5111回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/12"</span>,<span class="string">"win"</span>:<span class="string">"882"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5112回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/13"</span>,<span class="string">"win"</span>:<span class="string">"087"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5113回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/14"</span>,<span class="string">"win"</span>:<span class="string">"446"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5114回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/15"</span>,<span class="string">"win"</span>:<span class="string">"771"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5115回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/18"</span>,<span class="string">"win"</span>:<span class="string">"878"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5116回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/19"</span>,<span class="string">"win"</span>:<span class="string">"991"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5117回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/20"</span>,<span class="string">"win"</span>:<span class="string">"956"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5118回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/21"</span>,<span class="string">"win"</span>:<span class="string">"831"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5119回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/22"</span>,<span class="string">"win"</span>:<span class="string">"672"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5120回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/25"</span>,<span class="string">"win"</span>:<span class="string">"661"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5121回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/26"</span>,<span class="string">"win"</span>:<span class="string">"635"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5122回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/27"</span>,<span class="string">"win"</span>:<span class="string">"663"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5123回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/28"</span>,<span class="string">"win"</span>:<span class="string">"366"</span>&#125;]</span><br></pre></td></tr></table></figure><p>こうなります。</p><p>この状態で<code>date</code>をキーに抽選日降順にソートします。<br>※ツールで最新の当選番号が上に来るように設計したためソートします。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 降順の場合</span><br><span class="line">numbers.sort(<span class="keyword">function</span>(a,b) &#123;</span><br><span class="line">  <span class="keyword">if</span>(a.date &gt; b.date) <span class="built_in">return</span> -1;</span><br><span class="line">  <span class="keyword">if</span>(a.date &lt; b.date) <span class="built_in">return</span> 1;</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>この結果、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">"tit"</span>:<span class="string">"第5123回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/28"</span>,<span class="string">"win"</span>:<span class="string">"366"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5122回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/27"</span>,<span class="string">"win"</span>:<span class="string">"663"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5121回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/26"</span>,<span class="string">"win"</span>:<span class="string">"635"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5120回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/25"</span>,<span class="string">"win"</span>:<span class="string">"661"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5119回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/22"</span>,<span class="string">"win"</span>:<span class="string">"672"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5118回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/21"</span>,<span class="string">"win"</span>:<span class="string">"831"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5117回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/20"</span>,<span class="string">"win"</span>:<span class="string">"956"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5116回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/19"</span>,<span class="string">"win"</span>:<span class="string">"991"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5115回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/18"</span>,<span class="string">"win"</span>:<span class="string">"878"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5114回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/15"</span>,<span class="string">"win"</span>:<span class="string">"771"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5113回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/14"</span>,<span class="string">"win"</span>:<span class="string">"446"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5112回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/13"</span>,<span class="string">"win"</span>:<span class="string">"087"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5111回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/12"</span>,<span class="string">"win"</span>:<span class="string">"882"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5110回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/11"</span>,<span class="string">"win"</span>:<span class="string">"077"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5109回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/08"</span>,<span class="string">"win"</span>:<span class="string">"684"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5108回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/07"</span>,<span class="string">"win"</span>:<span class="string">"626"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5107回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/06"</span>,<span class="string">"win"</span>:<span class="string">"660"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5106回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/05"</span>,<span class="string">"win"</span>:<span class="string">"322"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5105回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/04"</span>,<span class="string">"win"</span>:<span class="string">"766"</span>&#125;,&#123;<span class="string">"tit"</span>:<span class="string">"第5104回"</span>,<span class="string">"date"</span>:<span class="string">"2019/02/01"</span>,<span class="string">"win"</span>:<span class="string">"049"</span>&#125;]</span><br></pre></td></tr></table></figure><p>こうなります。</p><p>これでアプリで使いたかったjson形式のナンバーズ当選番号データが完成しました。</p><h2><span id="jsonファイルの保存">jsonファイルの保存</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(<span class="string">'fs'</span>);</span><br><span class="line">fs.writeFileSync(<span class="string">'numbers3.json'</span>, JSON.stringify(winJson));</span><br></pre></td></tr></table></figure><p>ファイルの保存は特に書くことはありません。</p><p>以上でNode.jsで作るナンバーズアプリの準備ができましたので、あとはこのデータを加工しながら当選ロジックを完成させたいと思います。</p><p>今作っているナンバーズアプリですがテレビでも放映された理論を取り入れたアプリです。</p><p>テレビでは理論上100％当選と謳っていて、実際に当選していました。</p><p>ですので、ナンバーズアプリの公開を期待していてください！</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/numbers-2.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;※Node.jsアプリ作成の共有コーナーです。&lt;br&gt;※Node.jsアプリ作成にはExpressを使用しています。&lt;/p&gt;
&lt;p&gt;今回はナンバーズ（NUMBERS3 &amp;amp; N
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
      <category term="アプリの素" scheme="https://lancers.work/categories/%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%A0/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Express" scheme="https://lancers.work/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～</title>
    <link href="https://lancers.work/numbers-1/"/>
    <id>https://lancers.work/numbers-1/</id>
    <published>2019-04-03T09:39:00.000Z</published>
    <updated>2019-04-17T23:48:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/numbers-1.webp" alt></p><p>※Node.jsアプリ作成の共有コーナーです。<br>※Node.jsアプリ作成にはExpressを使用しています。</p><p>今回はナンバーズ（NUMBERS3 &amp; NUMBERS4）の超お役立ちアプリ（大げさ）に関するナレッジです！</p><a href="https://lancers.work/numbers3/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers3.jpg"></div><div class="descriptions"><div class="og-title">ナンバーズ3アプリ ～ Node.jsベース ～</div><div class="og-description">ナンバーズ4アプリはこちら ナンバーズ3 過去回の当選数字  集計回数：   ナンバーズ3 過去回の当選数字出現回数      (adsby…</div></div></div></a><a href="https://lancers.work/numbers4/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers4.jpg"></div><div class="descriptions"><div class="og-title">ナンバーズ4アプリ ～ Node.jsベース ～</div><div class="og-description">ナンバーズ3アプリはこちら ナンバーズ4 過去回の当選数字  集計回数：   ナンバーズ4 過去回の当選数字出現回数      (adsby…</div></div></div></a><p>瞬時に直近○○回分の当選数字と当選回数を表示します！（直近30回分が対象）</p><p>以前、KUSANAGIのWordPress上でPHPで組んだツールの焼き直しです。</p><p>アプリの公開は後日追記しますので、本記事はプログラムの流れの備忘録です。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#スクレイピングcheerio-httpcli">スクレイピング（cheerio-httpcli）</a></li></ul><!-- tocstop --></div><h2><span id="スクレイピングcheerio-httpcli">スクレイピング（cheerio-httpcli）</span></h2><p>Node.jsでナンバースの当選番号を某サイトからスクレイピングするプログラムを書きました。</p><p>スクレイピングの結果はjsonファイルに保存し、1日に1回更新とし、相手先のサイトに迷惑をかけないようにしています。</p><p>スクレイピングのモジュールはcheerio-httpcliを使いました。</p><p>今回はスクレイピングの結果を保存する関係で、同期処理にて組みました。</p><p><code>cheerio-httpcli</code>の非同期処理の書き方</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var client = require(<span class="string">'cheerio-httpcli'</span>);</span><br><span class="line"></span><br><span class="line">client.fetch(<span class="string">'https://対象URL/'</span>, &#123;&#125;, <span class="keyword">function</span> (err, $, result) &#123;</span><br><span class="line">  ・・・</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>普通にデータ収集・加工後にデータをまとめてjsonファイルに保存しようとすると、保存処理が先に走ってしまい、空のファイルが出来上がってしまいました。</p><p>いろいろやり方はあると思いますが（教えてください！）、今回は同期処理にてスクレイピング → ファイル保存を行いました。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var client = require(<span class="string">'cheerio-httpcli'</span>);</span><br><span class="line"></span><br><span class="line">var array = &#123;&#125;;</span><br><span class="line">array.tit = [];</span><br><span class="line">array.date = [];</span><br><span class="line">array.win = [];</span><br><span class="line"></span><br><span class="line">var html = client.fetchSync(<span class="string">'https://某NUMBERS当選番号公開ページURL/'</span>);</span><br><span class="line"></span><br><span class="line">// 第○○回を取得</span><br><span class="line">html.$(<span class="string">'th'</span>).each(<span class="keyword">function</span> (idx) &#123;</span><br><span class="line">  <span class="keyword">if</span>(html.$(this).text().match(<span class="string">'第'</span>)) &#123;</span><br><span class="line">    array.tit.push(html.$(this).text());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 抽選日を取得</span><br><span class="line">html.$(<span class="string">'td'</span>).each(<span class="keyword">function</span> (idx) &#123;</span><br><span class="line">  <span class="keyword">if</span>(html.$(this).text().match(<span class="string">'/'</span>)) &#123;</span><br><span class="line">    array.date.push(html.$(this).text());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 当選番号を取得    </span><br><span class="line">html.$(<span class="string">'td'</span>).each(<span class="keyword">function</span> (idx) &#123;</span><br><span class="line">  <span class="keyword">if</span>(html.$(this).text() &lt; 1000) &#123;</span><br><span class="line">    array.win.push(html.$(this).text());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>このサイトの当選番号は<code>table</code>で表示しているのですが、抽選日ごとに<code>table</code>があったり、<code>th</code>や<code>td</code>などにclassがあてられてなかったり、かつ、データの並びをうまく整理できず、<code>eq(0)</code>などで正常に取得できなかったので、非常に原始的な処理にしました。</p><ul><li>第1234回という回数は<code>th</code>に<code>第</code>の文字が含まれていたら回数として取得</li><li>抽選日は<code>td</code>に<code>/</code>が入っていたら日付として取得</li><li>当選番号（ナンバーズ3）の場合、当選数字は最大値として見ると999なので、1000以下の数字が<code>td</code>に入っていたら当選番号として取得</li></ul><p>こんな感じでターゲットのデータを取得し、配列に格納しています。</p><p>PHPではスマートに書けけているので、もう少し考えてみようとは思っています。</p><p>それでは長くなりましたので、今回はスクレイピングまでということで、その他のナレッジについては次回に続きます。</p><a href="https://lancers.work/numbers-2/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/numbers-2.jpg"></div><div class="descriptions"><div class="og-title">Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～</div><div class="og-description">※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER…</div></div></div></a><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/numbers-1.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;※Node.jsアプリ作成の共有コーナーです。&lt;br&gt;※Node.jsアプリ作成にはExpressを使用しています。&lt;/p&gt;
&lt;p&gt;今回はナンバーズ（NUMBERS3 &amp;amp; N
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
      <category term="アプリの素" scheme="https://lancers.work/categories/%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%A0/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Express" scheme="https://lancers.work/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Hexoのサイドバーのアーカイブ日付表示の変更方法</title>
    <link href="https://lancers.work/hexo-hueman-list-archives-date/"/>
    <id>https://lancers.work/hexo-hueman-list-archives-date/</id>
    <published>2019-04-02T04:40:00.000Z</published>
    <updated>2019-04-17T23:47:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/archives-list-date-fix.webp" alt></p><p>Hexoでブログを書き始めてかなり満足度の高い作業ができています。</p><p>Hexoブログ開設以来、ずっと気になっていて修正方法がわからなかった箇所があります。</p><p>ここです。</p><p><img src="/images/archives-list-date-before.webp" alt></p><p>サイドバーの<strong>アーカイブの日付が漢数字</strong>になっています。</p><p>今回はこの日付の表示方法を変更していきましょう！</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#archiveejsの修正">archive.ejsの修正</a></li></ul><!-- tocstop --></div><h2><span id="archiveejsの修正">archive.ejsの修正</span></h2><p>このブログのテーマは、<strong>hueman</strong>を使っていますので、他のテーマの方は記事内容を適宜読み替えたり、参考にしてみてください。</p><a href="https://github.com/ppoffice/hexo-theme-hueman" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://avatars0.githubusercontent.com/u/8849362?s=400&v=4"></div><div class="descriptions"><div class="og-title">ppoffice/hexo-theme-hueman</div><div class="og-description">A redesign of Alx&#39;s wordpress theme hueman, ported to Hexo. - ppoffice…</div></div></div></a><p>編集するファイルは、</p><p><code>/~/Hexoブログフォルダ/themes/hueman/layout/widget/archive.ejs</code></p><p>です。</p><p>ファイルの中身は、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (site.posts.length) &#123; %&gt;</span><br><span class="line">    &lt;div class=<span class="string">"widget-wrap widget-list"</span>&gt;</span><br><span class="line">        &lt;h3 class=<span class="string">"widget-title"</span>&gt;&lt;%= __(<span class="string">'sidebar.archives'</span>) %&gt;&lt;/h3&gt;</span><br><span class="line">        &lt;div class=<span class="string">"widget"</span>&gt;</span><br><span class="line">            &lt;%- list_archives() %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>となっています。</p><p>この5行目を次のように修正します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_archives(&#123;format: <span class="string">"YYYY年MM月"</span>&#125;) %&gt;</span><br></pre></td></tr></table></figure><p><code>&quot;YYYY年MM月&quot;</code>としましたが、<code>&quot;YYYY/MM&quot;</code>や<code>&quot;YYYY-MM&quot;</code>でも問題ありません。</p><p>この修正だけで、最初の中華っぽい漢数字の日付から洋風なオシャレ（？）な日付表示に変更できました。</p><p>これでかなりHexoブログのカスタマイズが進み、ほぼ現時点では完成に近い感じです。</p><p>しいて言えば、関連記事の表示をもう少し工夫したいところです。</p><p>これからNode.jsアプリをガシガシ作って、このブログで公開したり、ノウハウの共有をしていきたいと思います。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/archives-list-date-fix.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Hexoでブログを書き始めてかなり満足度の高い作業ができています。&lt;/p&gt;
&lt;p&gt;Hexoブログ開設以来、ずっと気になっていて修正方法がわからなかった箇所が
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Hexo" scheme="https://lancers.work/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexoのプラグインが機能しないので修正してみた ～ hexo-tag-link-preview編 ～</title>
    <link href="https://lancers.work/hexo-plugin-fix-tag-link-preview/"/>
    <id>https://lancers.work/hexo-plugin-fix-tag-link-preview/</id>
    <published>2019-03-31T22:19:00.000Z</published>
    <updated>2019-04-17T23:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hexo-tag-link-preview-fix.webp" alt></p><p>「Hexoのプラグインが機能しないので修正してみた」第二弾は<code>hexo-tag-link-preview</code>です。</p><p>このプラグインはリンク先をカードのように表示してくれるカッコいいプラグインです。こんな感じ。</p><a href="https://lancers.work/hexo-plugin-fix-toc/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/hexo-toc-fix.jpg"></div><div class="descriptions"><div class="og-title">Hexoのプラグインが機能しないので修正してみた ～ hexo-toc編 ～</div><div class="og-description">KUSANAGI（WordPress）からHexoへブログを移行して数日がたちました。 ブログをガシガシ書き始めたというより、ブログの体裁を…</div></div></div></a><p>この連載記事シリーズは管理人の環境に依存、管理人仕様的なところがあります。</p><p>gitにもnpmにも上げていませんし、プラグインが更新されるとまた修正しなければいけませんし、かといって修正版を公開するところまで至っていません。</p><p>また、プラグインの使い方が間違っているよ！ということもあるかもしれません。<br>（製作者の方、すみません。）</p><p>以上を踏まえて、同じところで悩まれ修正することができた人がいれば嬉しい限りです。</p><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#hexo-tag-link-preview-不具合の症状">hexo-tag-link-preview 不具合の症状</a></li><li><a href="#hexo-tag-link-preview-不具合の解消">hexo-tag-link-preview 不具合の解消</a><ul><li><a href="#修正対象ファイルindexjs">修正対象ファイル：index.js</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="hexo-tag-link-preview-不具合の症状">hexo-tag-link-preview 不具合の症状</span></h2><p>今回の不具合の気づきは、このプラグインであるあタグ<code>｛% linkPreview https://www.amazon.com/ _blank nofollow %｝</code>（例、}は表示上大文字になっています）を記事内に記述したところエラーで静的ファイルが生成されなかったことにあります。</p><p>タグの記述を何回見直しても正しかったので、これはプラグインファイルに原因が！ということで、該当ファイルを修正したところ上記のように表示されるようになりました。</p><p>この不具合は後日談ですが<code>hexo s</code>のエラーメッセージをよく見ればすぐに解決する内容でした。</p><p>もう一点、<code>_config.yml</code>に記述したオプションが機能しないということです。</p><p>class名をあてられないのは前回の<code>hexo-toc</code>より大きな問題ではありませんでしたが（管理人のケース）、キャプションの文字数が反映されないのが困りました。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h2><span id="hexo-tag-link-preview-不具合の解消">hexo-tag-link-preview 不具合の解消</span></h2><p>プラグインの実体は<code>node_modules</code>フォルダ内にあります。</p><p>hexo-tag-link-previewの実体は<code>hexo-tag-link-preview</code>フォルダになります。</p><h3><span id="修正対象ファイルindexjs">修正対象ファイル：index.js</span></h3><p>25行目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> getTag(options) &#123;</span><br></pre></td></tr></table></figure><p>これを、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getTag(options) &#123;</span><br></pre></td></tr></table></figure><p>というように先頭の<code>async</code>を削除したところ、<code>hexo s</code>、<code>hexo g</code>を実行してもエラーが出なくなり静的ファイルが生成されるようになりました。</p><p><code>async</code>は非同期処理を実行するためにつけるのですが、同期処理でも今のところ問題ないので、削除したまま使っています。</p><p>キャプションの文字数は<code>_config.yml</code>で変更できない状況にあるため、同じファイル<code>index.js</code>に直書きしてしのいでいます。</p><p>15行目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? hexo.config.linkPreview.descriptionLength : 70;</span><br></pre></td></tr></table></figure><p>末尾の数字を変更します。</p><p>以上、2点の不具合の解決方法はこれだけとなります。</p><p>本記事執筆現在手を加えたプラグインは2つですが、Hexoには便利なプラグインたくさんありますね。</p><p>今までKUSANAGI（WordPress）で作っていた表現がほぼ表現できます。</p><p>WordPressはかなり昔から使っていましたが、今では当たり前になって多くの人が使い、なんとなく嫌気がさしていたので、Hexoに乗り換えて正解です！</p><p>動的サイト、WordPress、PHPから脱却してみませんか？</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/hexo-tag-link-preview-fix.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;「Hexoのプラグインが機能しないので修正してみた」第二弾は&lt;code&gt;hexo-tag-link-preview&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Hexo" scheme="https://lancers.work/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexoのプラグインが機能しないので修正してみた ～ hexo-toc編 ～</title>
    <link href="https://lancers.work/hexo-plugin-fix-toc/"/>
    <id>https://lancers.work/hexo-plugin-fix-toc/</id>
    <published>2019-03-31T22:19:00.000Z</published>
    <updated>2019-04-17T23:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hexo-toc-fix.webp" alt></p><p>KUSANAGI（WordPress）からHexoへブログを移行して数日がたちました。</p><p>ブログをガシガシ書き始めたというより、ブログの体裁を整える日を送っています。</p><p>そんな中、Hexoのプラグインが機能しないという症状に度々遭遇したので、修正した内容を備忘録として書き留めていきます。</p><p>なお、この修正は管理人の環境、管理人仕様的なところがあります。</p><p>gitにもnpmにも上げていませんし、プラグインが更新されるとまた修正しなければいけませんし、修正版を公開するところまで至っていません。</p><p>また、プラグインの使い方が間違っているよ！ということもあるかもしれません。</p><p>以上を踏まえて、修正される方の参考になれば幸いです。</p><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#hexo-toc-不具合の症状">hexo-toc 不具合の症状</a></li><li><a href="#hexo-toc-不具合の解消">hexo-toc 不具合の解消</a><ul><li><a href="#修正対象ファイルlibfilterjs">修正対象ファイル：lib/filter.js</a></li><li><a href="#おまけ">おまけ</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="hexo-toc-不具合の症状">hexo-toc 不具合の症状</span></h2><p>言わずとしれた、ブログに目次を自動で付けてくれるプラグインです。</p><a href="https://www.npmjs.com/package/hexo-toc" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png"></div><div class="descriptions"><div class="og-title">hexo-toc</div><div class="og-description">Insert a markdown TOC(Table Of Content) before posts be rendered. </div></div></div></a><p>目次自体は<code>&lt;！-- toc --&gt;</code>を記事内に記述することで表示はできました。</p><p>しかし、<code>_config.yml</code>に記述したオプションが効かないのです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  maxdepth: 3</span><br><span class="line">  class: toc</span><br><span class="line">  slugify: transliteration</span><br><span class="line">  decodeEntities: <span class="literal">false</span></span><br><span class="line">  anchor:</span><br><span class="line">    position: after</span><br><span class="line">    symbol: <span class="string">'#'</span></span><br><span class="line">    style: header-anchor</span><br></pre></td></tr></table></figure><p>特に目次のデザインを調整したくclassをあてたかったので、class<code>toc</code>を追加するよう修正していきます。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h2><span id="hexo-toc-不具合の解消">hexo-toc 不具合の解消</span></h2><p>プラグインの実体は<code>node_modules</code>フォルダ内にあります。</p><p>hexo-tocの場合、そのまんま<code>hexo-toc</code>フォルダになります。</p><p>不具合解消の基本的な流れとして、オプションでclassが指定されていたらその指定値をclass名とするという仕様ですので、オプションの指定に関わらず、class<code>toc</code>を追加します。</p><h3><span id="修正対象ファイルlibfilterjs">修正対象ファイル：lib/filter.js</span></h3><p>※コードのブログでの表示上、大文字になっている箇所があります。</p><p>9行目～12行目</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// add class option</span><br><span class="line">if (options.class) &#123;</span><br><span class="line">  data.content = data.content.replace("<span class="tag">&lt;<span class="name">！--</span> <span class="attr">toc</span> <span class="attr">--</span>&gt;</span>", '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"' + options.class + 'Start"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">！--</span> <span class="attr">toc</span> <span class="attr">--</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"' + options.class + 'End"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>');</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを、</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// add class option</span><br><span class="line">data.content = data.content.replace("<span class="tag">&lt;<span class="name">！--</span> <span class="attr">toc</span> <span class="attr">--</span>&gt;</span>", '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tocStart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">！--</span> <span class="attr">toc</span> <span class="attr">--</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tocEnd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>');</span><br></pre></td></tr></table></figure><p>54行目～57行目</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// add class option</span><br><span class="line">if (options.class) &#123;</span><br><span class="line">  data.content = data.content.replace('<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"' + options.class + 'Start"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>', '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"' + options.class + '"</span>&gt;</span>').replace('<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"' + options.class + 'End"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>', '<span class="tag">&lt;/<span class="name">div</span>&gt;</span>');</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// add class option</span><br><span class="line">data.content = data.content.replace('<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tocStart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>', '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toc"</span>&gt;</span>').replace('<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tocEnd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>', '<span class="tag">&lt;/<span class="name">div</span>&gt;</span>');</span><br></pre></td></tr></table></figure><p>これでclass<code>toc</code>が当たりますので、あとはCSSでお好きなデザインにカスタマイズしてみてください。</p><h3><span id="おまけ">おまけ</span></h3><p>目次のタイトルの修正も合わせて行いました。</p><p>タイトルのidが<code>&lt;span id=&quot;目次&quot;&gt;</code>となってしまっていたことと、その度tocタグの上に<code>目次</code>と入力するのが面倒なので、上の修正箇所を更に修正して、</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// add class option</span><br><span class="line">data.content = data.content.replace('<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tocStart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>', '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toc-title"</span>&gt;</span>目　次<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toc"</span>&gt;</span>').replace('<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tocEnd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>', '<span class="tag">&lt;/<span class="name">div</span>&gt;</span>');</span><br></pre></td></tr></table></figure><p>というように<code>目次</code>というテキストとclassを予め付加しました。</p><p>汎用性がなくなる記述ですが、目次のタイトルは<strong>目次</strong>ですし、class（id）も日本語でなくなるので、超個人的ではありますが、このブログではこちらを使っていきます。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/hexo-toc-fix.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;KUSANAGI（WordPress）からHexoへブログを移行して数日がたちました。&lt;/p&gt;
&lt;p&gt;ブログをガシガシ書き始めたというより、ブログの体裁を整える日を送っています
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Hexo" scheme="https://lancers.work/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>KUSANAGIのLAMP環境にHexoを構築</title>
    <link href="https://lancers.work/hexo-on-kusanagi/"/>
    <id>https://lancers.work/hexo-on-kusanagi/</id>
    <published>2019-03-29T22:10:00.000Z</published>
    <updated>2019-04-17T23:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hexo-on-kusanagi.webp" alt></p><p>まだHexoでブログを書き始めたばかりで、正直Node.jsでのWEBアプリ開発はまだ本格的に始めていません。</p><p>HexoはNode.jsをほとんど意識せず、テキストを書き続けることで爆速ブログができていきますので、これはこれで楽しいです。</p><p>そんなHexoですが運営環境としてKUSANAGIとの連携が簡単というのが今回のお話です。</p><p>特にNode.jsやHexo初心者の方にはおすすめです。</p><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#kusanagiの特徴">KUSANAGIの特徴</a></li><li><a href="#kusanagi環境へhexoをインストールする">KUSANAGI環境へHexoをインストールする</a><ul><li><a href="#kusanagiによるlampプロビジョニング">KUSANAGIによるLAMPプロビジョニング</a></li><li><a href="#hexoインストール">Hexoインストール</a></li><li><a href="#nginx設定">Nginx設定</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="kusanagiの特徴">KUSANAGIの特徴</span></h2><p><strong>KUSANAGI</strong>とは超高速WordPress仮想マシンです。</p><p>KUSANAGIはWordPressを高速に動かすだけでなく、すばやくLAMP環境を構築したり、<strong>Let’s Encrypt</strong>によるSSL化を簡単にしたり、複数のWordPressなどを追加・削除できます。</p><p>このようにサーバー運営に必要な機能がてんこ盛り、かつ、便利な仮想マシンです。</p><p>このKUSANAGI環境とHexoを組み合わせて、簡単にHexoブログを公開しようというのが本記事の内容です。</p><h2><span id="kusanagi環境へhexoをインストールする">KUSANAGI環境へHexoをインストールする</span></h2><p>Node.jsのインストールはこちらの記事を参考に済ませておいてください。</p><a href="https://lancers.work/hexo-nodejs-blog/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://lancers.work/thumbnail/hexo-start-nodejs.jpg"></div><div class="descriptions"><div class="og-title">Hexo（node.js）で静的ブログを構築してみる</div><div class="og-description">もともとは、超高速WordPress仮想マシン「KUSANAGI」でWEBアプリを量産しようということで、KUSANAGIでブログを書いてい…</div></div></div></a><h3><span id="kusanagiによるlampプロビジョニング">KUSANAGIによるLAMPプロビジョニング</span></h3><p>KUSANAGIでLAMPをプロビジョニングします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kusanagi provision --lamp hexo-blog</span><br></pre></td></tr></table></figure><p><code>--lamp</code>を省略してしまいますとWordPressがインストールされてしましますので、<code>--lamp</code>は必須です。</p><p><code>--lamp</code>を指定したので、WordPressはインストールされず、プロファイル名<code>hexo-blog</code>（任意の名前で可）の空のドキュメントルートが作成されます。</p><p>プロビジョニング作業が進んでいくと、ドメインの設定やLet’s EncryptによるSSL化が実行されますので、この後のHexoインストール作業後にSSL化作業などを行う必要がありません、ここが楽です！</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h3><span id="hexoインストール">Hexoインストール</span></h3><p>Hexo自体をインストールしていない人は、下記コマンドでインストールしてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>KUSANAGIで作成したLAMPのドキュメントルートにHexoをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LAMPドキュメントルートへ移動</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/kusanagi/hexo-blog/DocumentRoot</span><br><span class="line"></span><br><span class="line"><span class="comment"># blogは任意の名前でOK</span></span><br><span class="line">$ hexo init blog</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>これで<code>/home/kusanagi/hexo-blog/DocumentRoot/blog</code>にHexoブログ一式がインストールされます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>サーバーを起動し<code>localhost:4000</code>または<code>ローカルIPアドレス:4000</code>にアクセスして、サンプルサイトが表示されることを確認してみてください。</p><h3><span id="nginx設定">Nginx設定</span></h3><p>KUSANAGIでLAMPを構築しますと、</p><ul><li><code>/etc/nginx/conf.d/hexo-blog_http.conf</code> </li><li><code>/etc/nginx/conf.d/hexo-blog_ssl.conf</code></li></ul><p>というファイルが作成されています。</p><p>これらのconfファイルのルートディレクトリの記述を次のように書き換えます。</p><p><code>root  /home/kusanagi/hexo-blog/DocumentRoot/blog/public;</code></p><p>最後の<code>public</code>は固定文字列です。</p><p>Hexoで静的ファイルを生成すると<code>public</code>フォルダにブログの静的ファイルが格納されますので、それをそのまま公開用のディレクトリにしてしまおうという設定です。</p><p>GitHub PagesやNetlifyにデプロイすることもできますが、お手軽に独自ドメインで公開するにはKUSANAGIを使うと難易度が下がると思います。</p><p>KUSANAGIとHexoの連携いかがでしたでしょうか？</p><p>KUSANAGI（WordPress）からHexo（Node.js）に移行しましたが、やはりKUSANAGIは素晴らしい仕組みです。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/hexo-on-kusanagi.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;まだHexoでブログを書き始めたばかりで、正直Node.jsでのWEBアプリ開発はまだ本格的に始めていません。&lt;/p&gt;
&lt;p&gt;HexoはNode.jsをほとんど意識せず
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="KUSANAGI" scheme="https://lancers.work/tags/KUSANAGI/"/>
    
      <category term="let&#39;s encrypt" scheme="https://lancers.work/tags/let-s-encrypt/"/>
    
  </entry>
  
  <entry>
    <title>jQueryで都道府県・市区町村プルダウン（都道府県連動型セレクトメニュー）をできる限り少ないコード数で書いてみた</title>
    <link href="https://lancers.work/pref-city-form-jquery-json/"/>
    <id>https://lancers.work/pref-city-form-jquery-json/</id>
    <published>2019-03-29T06:53:00.000Z</published>
    <updated>2019-04-17T23:48:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pref-city-form.webp" alt></p><p>WEBアプリを開発していると、頻繁に利用される<strong>都道府県・市区町村プルダウンメニュー</strong>（都道府県連動型セレクトメニュー）。</p><p>本記事ではjQueryを使って、この都道府県連動型・市区町村プルダウンメニューをなるべく少ない行数で書いてみましたので、参考になれば幸いです。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#基本データ都道府県市区町村-json形式データ">基本データ（都道府県・市区町村 json形式データ）</a></li><li><a href="#jqueryで都道府県連動型市区町村プルダウンメニューを作る">jQueryで都道府県連動型市区町村プルダウンメニューを作る</a><ul><li><a href="#サンプル">サンプル</a></li><li><a href="#jqueryソース">jQueryソース</a></li><li><a href="#htmlソース">HTMLソース</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="基本データ都道府県市区町村-json形式データ">基本データ（都道府県・市区町村 json形式データ）</span></h2><p>当ブログで用意している都道府県・市区町村のjsonデータの形式は、</p><p><code>[{&quot;01&quot;:{&quot;id&quot;:&quot;01″,&quot;pref&quot;:&quot;北海道&quot;,&quot;en&quot;:&quot;hokkaido&quot;,&quot;city&quot;:[{&quot;id&quot;:&quot;01100″,&quot;name&quot;:&quot;札幌市&quot;},{&quot;id&quot;:&quot;01101″,&quot;name&quot;:&quot;中央区&quot;}, ・・・]</code></p><p>となっています。</p><ul><li>キー</li><li>id：都道府県コード</li><li>pref：都道府県名</li><li>en：都道府県英字名</li><li>city：市区町村データ（id：市区町村コード、name：市区町村名）</li></ul><p>常に最新の「都道府県・市区町村jsonデータ」は↓こちらのリンク↓からダウンロードできます。</p><p><a href="https://lancers.work/json/pref_city.json" download="pref_city.json">都道府県・市区町村 jsonデータ</a></p><p>※「都道府県・市区町村jsonデータ」は毎日更新しています。<br>※クリックでダウンロードできない場合は、右クリックでリンク先を保存してください。<br>※「都道府県・市区町村jsonデータ」ご利用の際はダウンロードしてお使いください。</p><h2><span id="jqueryで都道府県連動型市区町村プルダウンメニューを作る">jQueryで都道府県連動型市区町村プルダウンメニューを作る</span></h2><h3><span id="サンプル">サンプル</span></h3><select id="select-pref"><option value>都道府県を選択してください</option></select><select id="select-city"><option value>市区町村を選択してください</option></select><script>// 都道府県フォーム生成$(function() {  $.getJSON('../../json/pref_city.json', function(data) {    for(var i=0; i<47; i++) {      var code = i+1;      code = ('00'+code).slice(-2);      $('#select-pref').append('<option value="'+code+'">'+data[i][code].pref+'</option>');    }  });});// 都道府県メニューに連動した市区町村フォーム生成$('#select-pref').on('change', function() {  $('#select-city option:nth-child(n+2)').remove(); // ※1 市区町村フォームクリア    var select_pref = ('00'+$('#select-pref option:selected').val()).slice(-2);    var key = Number(select_pref)-1;    $.getJSON('../../json/pref_city.json', function(data) {      for(var i=0; i<data[key][select_pref].city.length; i++){        $('#select-city').append('<option value="'+data[key][select_pref].city[i].id+'">'+data[key][select_pref].city[i].name+'</option>');      }  });});</script><h3><span id="jqueryソース">jQueryソース</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">// 都道府県フォーム生成</span></span><br><span class="line"><span class="undefined">$(function() &#123;</span></span><br><span class="line"><span class="undefined">  $.getJSON('pref_city.json', function(data) &#123;</span></span><br><span class="line"><span class="undefined">    for(var i=0; i&lt;47; i++) &#123;</span></span><br><span class="line"><span class="undefined">      var code = i+1;</span></span><br><span class="line"><span class="undefined">      code = ('00'+code).slice(-2); // ゼロパディング</span></span><br><span class="line"><span class="xml">      $('#select-pref').append('<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"'+code+'"</span>&gt;</span>'+data[i][code].pref+'<span class="tag">&lt;/<span class="name">option</span>&gt;</span>');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">// 都道府県メニューに連動した市区町村フォーム生成</span></span><br><span class="line"><span class="undefined">$('#select-pref').on('change', function() &#123;</span></span><br><span class="line"><span class="undefined">  $('#select-city option:nth-child(n+2)').remove(); // ※1 市区町村フォームクリア</span></span><br><span class="line"><span class="undefined">    var select_pref = ('00'+$('#select-pref option:selected').val()).slice(-2);</span></span><br><span class="line"><span class="undefined">    var key = Number(select_pref)-1;</span></span><br><span class="line"><span class="undefined">    $.getJSON('pref_city.json', function(data) &#123;</span></span><br><span class="line"><span class="undefined">      for(var i=0; i&lt;data[key][select_pref].city.length; i++)&#123;</span></span><br><span class="line"><span class="xml">        $('#select-city').append('<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"'+data[key][select_pref].city[i].id+'"</span>&gt;</span>'+data[key][select_pref].city[i].name+'<span class="tag">&lt;/<span class="name">option</span>&gt;</span>');</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><p>4行目の<code>$.getJSON(&#39;pref_city.json&#39;, function(data) {</code>の<code>pref_city.json</code>（上記でダウンロードしたjsonファイル）は「都道府県・市区町村jsonデータ」を読み込んでいますので、「都道府県・市区町村jsonデータ」の設置場所によって、適宜パスを変更してください。</p><p>20行目で都道府県コードに連動した市区町村プルダウンメニューを生成しています。</p><p>ちょっと配列が複雑でわかりにくいかもしれませんが、配列を分解すると、</p><ul><li><code>data[key][select_pref]</code>に選択された都道府県コードが入ります。</li><li><code>data[key][select_pref]</code>（選択された都道府県）の<code>city[i].id</code>で順次for文で市区町村コードを取得しています。</li><li>同様に<code>city[i].name</code>で市区町村名を取得して、都道府県のセレクトメニューに連動した市区町村セレクトメニューを作成しています。</li></ul><p>※key値と都道府県コードが1ずつずれているため余計な処理が入っているので、ここを調整すればもっとスッキリできると思います。<br>例）北海道：key=0,都道府県コード=01</p><p>また、都道府県を切り替えた時に、前に選択していた都道府県の市区町村がフォームに残るので、※1の箇所で1行目（「市区町村を選択してください」などの初期表示行）以外を削除しています。</p><h3><span id="htmlソース">HTMLソース</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select-pref"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>都道府県を選択してください<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select-city"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>市区町村を選択してください<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>いかがでしたでしょうか？</p><p>もっとコンパクトに都道府県連動市区町村プルダウンメニューを書けるかもしれませんので探求したいと思います。</p><p>現実的には、クライアント様やその時々の状況で、バラバラな書き方をしてきましたので、可能な限り統一してかつ簡潔に書いていきたいと思う今日このごろです。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/pref-city-form.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;WEBアプリを開発していると、頻繁に利用される&lt;strong&gt;都道府県・市区町村プルダウンメニュー&lt;/strong&gt;（都道府県連動型セレクトメニュー）。&lt;/p&gt;
&lt;p&gt;本記
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="jQuery" scheme="https://lancers.work/tags/jQuery/"/>
    
      <category term="json" scheme="https://lancers.work/tags/json/"/>
    
      <category term="HTML" scheme="https://lancers.work/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hexo（node.js）で静的ブログを構築してみる</title>
    <link href="https://lancers.work/hexo-nodejs-blog/"/>
    <id>https://lancers.work/hexo-nodejs-blog/</id>
    <published>2019-03-28T20:23:00.000Z</published>
    <updated>2019-04-17T23:47:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hexo-start-nodejs.webp" alt></p><p>もともとは、超高速WordPress仮想マシン「KUSANAGI」でWEBアプリを量産しようということで、KUSANAGIでブログを書いていました。（今もぼちぼち書いてます）</p><p>なぜ、Node.jsに切り替えたのか？</p><p>それは2018年末にNode.js+Express環境を構築して途中までWEBアプリを作成していたことを思い出し、さらに、2019年初「今年の目標はnode.jsを極める」を目標に掲げていたからです。</p><p>クライアント様の案件はPHPが多くなかなかNode.jsを使う機会がなかったので、年度の切り替えを機にあらためて今年の目標達成に向けて始動したという経緯です。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><div class="toc-title">目　次</div><div class="toc"><!-- toc --><ul><li><a href="#nodejsインストール">Node.jsインストール</a></li><li><a href="#mongdbインストール">MongDBインストール</a></li><li><a href="#hexoインストール">Hexoインストール</a></li></ul><!-- tocstop --></div><h2><span id="nodejsインストール">Node.jsインストール</span></h2><p>当初、CentOS7ではエラーが出てしまい、時間の無駄と思いubuntuに切り替えたのですが、この度無事このようにKUSANAGIを動かしているCentOS7にNode.jsでのブログ環境を構築できました。</p><p>それではNode.jsのブログ環境を整えていきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y epel-release</span><br><span class="line"></span><br><span class="line">$ sudo yum -y update</span><br><span class="line"></span><br><span class="line">$ sudo yum install -y nodejs</span><br><span class="line"></span><br><span class="line">$ node -v</span><br><span class="line">v6.16.0</span><br><span class="line"></span><br><span class="line">$ npm -v</span><br><span class="line">3.10.10</span><br></pre></td></tr></table></figure><h2><span id="mongdbインストール">MongDBインストール</span></h2><p>前回、ここでハマりました。</p><p>MongoDBをなにげにyumでインストールしましたが、エラーで一向に立ち上がらない。。。</p><p>そして一晩調べた結果、公式通りにやりましたら、なんのなんのすんなりいきました（公式は嘘つかない←当たり前）</p><p>MongoDBの公式ページはこちらです。</p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="http://s3.amazonaws.com/info-mongodb-com/_com_assets/cms/mongodb-for-giant-ideas-bbab5c3cf8.png"></div><div class="descriptions"><div class="og-title">Install MongoDB Community Edition on Red Hat Enterprise or CentOS Linux — MongoDB Manual</div></div></div></a><p>ポイントは<code>/etc/yum.repos.d/mongodb-org-4.0.repo</code>を公式通りに作成または修正することでした。</p><p><code>/etc/yum.repos.d/mongodb-org-4.0.repo</code>を、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/4.0/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</span><br></pre></td></tr></table></figure><p>と公式ページ記載の通り記述します（上記の内容は執筆時点ですので、インストール時は最新の情報を確認してください。）</p><p>あとはインストールと実行あるのみです！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y mongodb-org</span><br><span class="line"></span><br><span class="line">$ sudo service mongod start</span><br></pre></td></tr></table></figure><p>※MongoDBは開発用にインストールしました。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><h2><span id="hexoインストール">Hexoインストール</span></h2><p>前回のブログでは、Keystoneをインストールしました。</p><p>Keystoneはブログももちろん書けますが、WEBアプリ開発に向いているかなという感じを持ちましたので、ブログはブログに特化したHexoに変更しました。</p><p>Hexoのインストール方法も公式ページに素直に従いましょう。</p><a href="https://hexo.io/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img></div><div class="descriptions"><div class="og-title">Hexo</div><div class="og-description">Hexo is a fast, simple &amp; powerful blog framework powered by Node.js.</div></div></div></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">$ hexo init blog</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>「blog」はプロファイル名=ブログを格納する場所です。</p><p><code>hexo server</code>を実行すると、開発環境下では<code>http://ローカルIPアドレス:4000</code>でサイトを見ることができます。</p><p>簡単ですが、Node.jsでブログを開設するところまでの解説でした。</p><p>このあとまだまだ設定したりする箇所もあります。</p><p>目標であるNode.jsアプリの開発もガシガシやっていきたいと思います。</p><p>それらはこちらのブログに随時書いていきたいと思いますのでよろしくお願いします。</p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6760690047817155" data-ad-slot="5538845879"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/hexo-start-nodejs.webp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;もともとは、超高速WordPress仮想マシン「KUSANAGI」でWEBアプリを量産しようということで、KUSANAGIでブログを書いていました。（今もぼちぼち書い
      
    
    </summary>
    
      <category term="ナレッジ" scheme="https://lancers.work/categories/%E3%83%8A%E3%83%AC%E3%83%83%E3%82%B8/"/>
    
    
      <category term="Node.js" scheme="https://lancers.work/tags/Node-js/"/>
    
      <category term="Hexo" scheme="https://lancers.work/tags/Hexo/"/>
    
      <category term="MongoDB" scheme="https://lancers.work/tags/MongoDB/"/>
    
  </entry>
  
</feed>
