{"meta":{"title":"フリーランサーとして生きる道","subtitle":"令和元年の目標はNode.jsを極めること！","description":"Hexoは超高速WordPress仮想マシン「KUSANAGI」を超えられるか？！そして収益化ブログになり得るのか？！挑戦中！","author":"bulma","url":"https://lancers.work","root":"/"},"pages":[{"title":"プライバシーポリシー","date":"2019-03-29T07:09:00.000Z","updated":"2019-03-29T09:24:31.000Z","comments":true,"path":"privacy-policy/index.html","permalink":"https://lancers.work/privacy-policy/index.html","excerpt":"","text":"私たちについて私たちのサイトアドレスは https://lancers.work です。 このサイトが収集する個人データと収集の理由コメント訪問者がこのサイトにコメントを残す際、コメントフォームに表示されているデータ、そしてスパム検出に役立てるための IP アドレスとブラウザーユーザーエージェント文字列を収集します。 メールアドレスから作成される匿名化された (「ハッシュ」とも呼ばれる) 文字列は、あなたが Gravatar サービスを使用中かどうか確認するため同サービスに提供されることがあります。同サービスのプライバシーポリシーは https://automattic.com/privacy/ にあります。コメントが承認されると、プロフィール画像がコメントとともに一般公開されます。 メディアサイトに画像をアップロードする際、位置情報 (EXIF GPS) を含む画像をアップロードするべきではありません。サイトの訪問者は、サイトから画像をダウンロードして位置データを抽出することができます。 お問い合わせフォームお問い合わせフォーム Cookieサイトにコメントを残す際、お名前、メールアドレス、サイトを Cookie に保存することにオプトインできます。これはあなたの便宜のためであり、他のコメントを残す際に詳細情報を再入力する手間を省きます。この Cookie は1年間保持されます。 もしあなたがアカウントを持っており、このサイトにログインすると、私たちはあなたのブラウザーが Cookie を受け入れられるかを判断するために一時 Cookie を設定します。この Cookie は個人データを含んでおらず、ブラウザーを閉じた時に廃棄されます。 ログインの際さらに、ログイン情報と画面表示情報を保持するため、私たちはいくつかの Cookie を設定します。ログイン Cookie は2日間、画面表示オプション Cookie は1年間保持されます。「ログイン状態を保存する」を選択した場合、ログイン情報は2週間維持されます。ログアウトするとログイン Cookie は消去されます。 もし投稿を編集または公開すると、さらなる Cookie がブラウザーに保存されます。この Cookie は個人データを含まず、単に変更した投稿の ID を示すものです。1日で有効期限が切れます。 他サイトからの埋め込みコンテンツこのサイトの投稿には埋め込みコンテンツ (動画、画像、投稿など) が含まれます。他サイトからの埋め込みコンテンツは、訪問者がそのサイトを訪れた場合とまったく同じように振る舞います。 これらのサイトは、あなたのデータの収集、Cookie の使用、サードパーティによる追加トラッキングの埋め込み、埋め込みコンテンツとのやりとりの監視を行うことがあります。アカウントを使ってそのサイトにログイン中の場合、埋め込みコンテンツとのやりとりのトラッキングも含まれます。 アナリティクスあなたのデータの共有先あなたのデータは当サイトの品質向上のため、または、違法行為に該当する場合の第三者への提供ならびに個人情報開示要求のために利用されます。 データを保存する期間あなたがコメントを残すと、コメントとそのメタデータが無期限に保持されます。これは、モデレーションキューにコメントを保持しておく代わりに、フォローアップのコメントを自動的に認識し承認できるようにするためです。 このサイトに登録したユーザーがいる場合、その方がユーザープロフィールページで提供した個人情報を保存します。すべてのユーザーは自分の個人情報を表示、編集、削除することができます (ただしユーザー名は変更することができません)。サイト管理者もそれらの情報を表示、編集できます。 データに対するあなたの権利このサイトのアカウントを持っているか、サイトにコメントを残したことがある場合、私たちが保持するあなたについての個人データ (提供したすべてのデータを含む) をエクスポートファイルとして受け取るリクエストを行うことができます。また、個人データの消去リクエストを行うこともできます。これには、管理、法律、セキュリティ目的のために保持する義務があるデータは含まれません。 あなたのデータの送信先訪問者によるコメントは、自動スパム検出サービスを通じて確認を行う場合があります。 あなたの連絡先情報悪質な行為、危害を加える行為など認められた場合、第三者期間に対し、訪問者の個人情報の開示を求めます。 以上"}],"posts":[{"title":"Hexo->GitHub->Netlifyで静的サイトを公開する方法をわかりやすく解説","slug":"hexo-github-netlify-deploy","date":"2019-04-06T22:59:00.000Z","updated":"2019-04-07T10:22:39.000Z","comments":true,"path":"hexo-github-netlify-deploy/","link":"","permalink":"https://lancers.work/hexo-github-netlify-deploy/","excerpt":"","text":"これまで社内サーバーにKUSANAGI仮想マシンを置いて、その中でNode.jsの開発、このブログの執筆を行い、公開していました。 開発環境は快適で、ブログの公開もデプロイ？SSL？なんて考えず、KUSANAGI配下で簡単に行っていました。 KUSANAGIのLAMP環境にHexoを構築まだHexoでブログを書き始めたばかりで、正直Node.jsでのWEBアプリ開発はまだ本格的に始めていません。 HexoはNode.jsをほ… しかし、如何せん弱小回線のため、このブログのGoogleのPageSpeed Insightsでは遅い！とお叱りを受けていました（泣） そこで高機能でパフォーマンスが優れていて、Hexoユーザー御用達の無料ホスティングサービスNetlifyに移行することにしました。 結果から言いますとPageSpeed Insightsのスコアは激的に改善されました。 引っ越しにあたりましていくつかのサイトを参考にさせてもらいましたが、少々ややこしく書かれていたり、もっと単純かつ簡単にNetlifyにデプロイ（配置）できましたので、そのあたりをまとめておきたいと思います。 (adsbygoogle = window.adsbygoogle || []).push({}); 目 次 前段 Hexoの設定 _config.ymlの設定 プラグインのインストール GitHubへのデプロイ Netlifyにデプロイ HTTPS化 まとめ 前段この記事を読んでいる方は、 既にHexoでブログを書いている GitHubのアカウントを既に持っている という方を対象にしています。 Node.jsやHexoのインストール方法などは、当ブログの記事や皆さんの記事を参考にしてください。 Hexo（node.js）で静的ブログを構築してみるもともとは、超高速WordPress仮想マシン「KUSANAGI」でWEBアプリを量産しようということで、KUSANAGIでブログを書いてい… Hexoの設定_config.ymlの設定_config.yml123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/your-git-account/your-repository.git branch: master ブログ本体（Themes内ではなく）の_config.ymlの# Deploymentの箇所に上記のように記述します。 予め、リポジトリ（空でOK）を作成しておき、gitのURLをrepo欄に記述します。（私はprivateなリポジトリを作成しました。） 同じ_config.ymlにURLを記述する箇所がありますが、ここは、GitHub Pagesにブログを公開するわけではないので、GitHub PagesのURLを記述せず、独自ドメインや今まで入力してあった内容のままで大丈夫です。 このブログの例123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://lancers.workroot: /permalink: :title/permalink_defaults: プラグインのインストールgit デプロイプラグイン1npm i -S hexo-deployer-git hexoブログの設定はここまでです。 GitHubへのデプロイ早速Netlifyに展開してきましょう。 まずは、静的HTMLを生成し、同時にHTMLソースをGitHubへデプロイします。 1hexo d -g このコマンドだけで完了しますので、予め作成しておいたGitHubのリポジトリを見てみてください。 生成されたHTMLソースが登録されていると思います。 (adsbygoogle = window.adsbygoogle || []).push({}); NetlifyにデプロイNetlifyにGitHubアカウントでログインします。 New site from Gitボタンを押します。 GitHubボタンを押します。 先程作ったGitHubのリポジトリを選択します。（この画面に辿り着く前に、どのリポジトリを登録するかの画面があると思いますが私はallを選択しました。キャプチャ漏れすいません。） Deploy siteボタンを押してNetlifyにデプロイします。 ポイントはBuild commandもPublish directoryも未入力にすることです。 無事デプロイされるとhttps://hogehoge-hoge-e38e39.netlify.com/のような一時的なURLが示され、ブログが表示されます。 独自ドメインを設定される場合は、Domain managementメニューからドメインを登録して、DNSサーバーにNetlifyが示したAレコードを設定します。 HTTPS化 この記事の投稿時点ではまだDNSが浸透していないので、HTTPS化されていないと思いますが、上記画像のボタンを押すだけでSSL化が完了します。 まとめ上記までの作業で後は、 1 Hexoでブログを書く 2 hexo d -gコマンドを実行する の繰り返しでGitHubを意識せずNetlifyに自動的にデプロイされます。 (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"https://lancers.work/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://lancers.work/tags/GitHub/"},{"name":"Netlify","slug":"Netlify","permalink":"https://lancers.work/tags/Netlify/"}]},{"title":"ナンバーズ4アプリ","slug":"numbers4","date":"2019-04-05T05:39:00.000Z","updated":"2019-04-07T10:20:56.000Z","comments":true,"path":"numbers4/","link":"","permalink":"https://lancers.work/numbers4/","excerpt":"","text":"ナンバーズ3はこちら ナンバーズ4 過去10回の当選数字 集計回数 ナンバーズ4 過去10回の当選数字出現回数 (adsbygoogle = window.adsbygoogle || []).push({}); 目 次 ナンバーズアプリについて ナンバーズアプリの使い方 ナンバーズ予想 実験方法 このアプリを支えているNode.js製WEBアプリ ナンバーズアプリについてナンバーズアプリの使い方直近回から過去30回までの当選番号、出現回数を調べることができます 集計回数を絞り込むと下段の「当選数字出現回数」も自動的に集計し直されます。 ナンバーズ予想 実験方法某テレビ番組で「月の最初の2週間の当選数字」に出現していない数字を中心に残り2週間ナンバーズを買い続けるという必勝法が紹介されていました。※テレビ放映では当選確率100％と言っていて、本当に当選していました。（購入口数もそれなりに必要だったみたいですが・・・） 本アプリでは、この放映内容を元に直近2週間分（10回分）の当選数字を集計して、どの数字が出ていないかチェックすることができます。 具体的な購入数字の組み合わせはこのアプリでは提供されませんので、このアプリの先からはあなたの運におまかせします！ ナンバーズは偏りはあるものの所詮確率論と考えていますので、最終的にはすべての組み合わせ・数字が等しく出現するハズとの考え方を尊重しています。 このアプリを支えているNode.js製WEBアプリ本アプリで使用しているナンバーズの当選番号データは、Node.jsで作成したWEBアプリでスクレイピングにより取得しています。（スクレイピンは1日1回行っています。スクレイピングをする際は対象サイトに迷惑をかけないように行いましょう。） Node.jsアプリのエッセンスは下記記事に書いています。 Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER… Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER… ナンバーズ3はこちら (adsbygoogle = window.adsbygoogle || []).push({}); #tit {font-size: large;} #win-result th, #win-result td {text-align: center; width: 25%;} function createTable(c) { var t = '回分回別抽選日当選数字'; var ca = []; $.getJSON('../../json/numbers4.json', function(d) { for(var i=0; i b.count) return 1; return 0; }); var t = '当選数字（出現回数少ない順）'; ct.forEach(function(d) { t += ''+d.num+''; }); t += '出現回数'; ct.forEach(function(d) { t += ''+d.count+''; }); t += ''; return t; } function strToArray(s) { var s1 = s.split(''); var a = []; s1.forEach(function(d) { a.push(d); }); return a; } function countNumber(a) { var c = [0,0,0,0,0,0,0,0,0,0]; a.forEach(function(d1) { d1.forEach(function(d2) { c[d2]++; }); }); var r = []; for(var i=0; i","categories":[{"name":"アプリ","slug":"アプリ","permalink":"https://lancers.work/categories/アプリ/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Express","slug":"Express","permalink":"https://lancers.work/tags/Express/"},{"name":"jQuery","slug":"jQuery","permalink":"https://lancers.work/tags/jQuery/"}]},{"title":"ナンバーズ3アプリ","slug":"numbers3","date":"2019-04-05T05:39:00.000Z","updated":"2019-04-07T10:20:41.000Z","comments":true,"path":"numbers3/","link":"","permalink":"https://lancers.work/numbers3/","excerpt":"","text":"ナンバーズ4はこちら ナンバーズ3 過去10回の当選数字 集計回数 ナンバーズ3 過去10回の当選数字出現回数 (adsbygoogle = window.adsbygoogle || []).push({}); 目 次 ナンバーズアプリについて ナンバーズアプリの使い方 ナンバーズ予想 実験方法 このアプリを支えているNode.js製WEBアプリ ナンバーズアプリについてナンバーズアプリの使い方直近回から過去30回までの当選番号、出現回数を調べることができます 集計回数を絞り込むと下段の「当選数字出現回数」も自動的に集計し直されます。 ナンバーズ予想 実験方法某テレビ番組で「月の最初の2週間の当選数字」に出現していない数字を中心に残り2週間ナンバーズを買い続けるという必勝法が紹介されていました。※テレビ放映では当選確率100％と言っていて、本当に当選していました。（購入口数もそれなりに必要だったみたいですが・・・） 本アプリでは、この放映内容を元に直近2週間分（10回分）の当選数字を集計して、どの数字が出ていないかチェックすることができます。 具体的な購入数字の組み合わせはこのアプリでは提供されませんので、このアプリの先からはあなたの運におまかせします！ ナンバーズは偏りはあるものの所詮確率論と考えていますので、最終的にはすべての組み合わせ・数字が等しく出現するハズとの考え方を尊重しています。 このアプリを支えているNode.js製WEBアプリ本アプリで使用しているナンバーズの当選番号データは、Node.jsで作成したWEBアプリでスクレイピングにより取得しています。（スクレイピンは1日1回行っています。スクレイピングをする際は対象サイトに迷惑をかけないように行いましょう。） Node.jsアプリのエッセンスは下記記事に書いています。 Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER… Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER… ナンバーズ4はこちら (adsbygoogle = window.adsbygoogle || []).push({}); #tit {font-size: large;} #win-result th, #win-result td {text-align: center; width: 25%;} function createTable(c) { var t = '回分回別抽選日当選数字'; var ca = []; $.getJSON('../../json/numbers3.json', function(d) { for(var i=0; i b.count) return 1; return 0; }); var t = '当選数字（出現回数少ない順）'; ct.forEach(function(d) { t += ''+d.num+''; }); t += '出現回数'; ct.forEach(function(d) { t += ''+d.count+''; }); t += ''; return t; } function strToArray(s) { var s1 = s.split(''); var a = []; s1.forEach(function(d) { a.push(d); }); return a; } function countNumber(a) { var c = [0,0,0,0,0,0,0,0,0,0]; a.forEach(function(d1) { d1.forEach(function(d2) { c[d2]++; }); }); var r = []; for(var i=0; i","categories":[{"name":"アプリ","slug":"アプリ","permalink":"https://lancers.work/categories/アプリ/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Express","slug":"Express","permalink":"https://lancers.work/tags/Express/"},{"name":"jQuery","slug":"jQuery","permalink":"https://lancers.work/tags/jQuery/"}]},{"title":"VMware ESXi「No Network Adapters」エラー時の対処法","slug":"vmware-esxi65-realtek-nic","date":"2019-04-04T02:10:00.000Z","updated":"2019-04-07T10:21:31.000Z","comments":true,"path":"vmware-esxi65-realtek-nic/","link":"","permalink":"https://lancers.work/vmware-esxi65-realtek-nic/","excerpt":"","text":"ESXiはINTEL NIC以外のネットワークアダプタを認識してくれない？！ 使わないパソコンが3台あって、VMware vSphere Hypervisor ESXiを入れたところ、見事に3台とも「No Network Adapters」のグレー画面（キャプチャ撮り忘れた）が現れてインストールできず。 どうやらINTEL NIC以外のネットワークアダプタは認識しないようで、確かにINTEL製ではなかった。。。 (adsbygoogle = window.adsbygoogle || []).push({}); 目 次 ESXiのカスタムISOを作る ESXi-Customizer-PS-v2.6.0.ps1はデジタル署名されていません。 ESXiのカスタムISOを作る先人の方々の教え通り、 vSphere PowerCLI VMware-PowerCLI-6.3.0-3737840.exe ESXi-Customizer-PS ESXi-Customizer-PS-v2.6.0.ps1 Realtek NIC on vSphere 6 net51-drivers-1.0.0-1vft.510.0.0.799733.x86_64.vib をダウンロードして、CustomizerとRealtek NICドライバをC\\:に置きます。 1C:\\ESXi-Customizer-PS-v2.6.0.ps1 -v65 -pkgDir C:\\ このようにコマンド実行すると、Realtek NIC入のESXi6.5のISOファイルが出来上がります。 ここまでの流れで、コマンド実行前にポリシー実行の設定を変えたりするのですが、一つつまずいた点がありました。 (adsbygoogle = window.adsbygoogle || []).push({}); ESXi-Customizer-PS-v2.6.0.ps1はデジタル署名されていません。 ポリシー実行を変更しても、「ESXi-Customizer-PS-v2.6.0.ps1はデジタル署名されていません。」という冷たいお言葉が帰ってきました。 デジタル署名ってどうするの？ 答えは簡単でした。 ESXi-Customizer-PS-v2.6.0.ps1のプロパティを開いて、赤枠の「許可する」にチェックを入れると上記のエラーメッセージは出なくなり、無事にISOファイルが作成できます。 ここだけの話、最初欲張って、Realtek NIC入りESXi6.7を下記コマンドで作ってみたのですが、 1C:\\ESXi-Customizer-PS-v2.6.0.ps1 -v67 -pkgDir C:\\ 警告の嵐で作成できませんでした。 ESXi6.7バージョンがほしい方はこちらのサイトが参考になりますので、お試しください。 RealtekのNICのドライバーを組み込んだESXi 6.7のカスタムイメージを作成するインフラエンジニアの技術メモ。Zabbix / Raspberry Pi / QNAP / Windows Server / Linux /… (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"VMware","slug":"VMware","permalink":"https://lancers.work/tags/VMware/"},{"name":"ESXi","slug":"ESXi","permalink":"https://lancers.work/tags/ESXi/"},{"name":"仮想化","slug":"仮想化","permalink":"https://lancers.work/tags/仮想化/"}]},{"title":"WordPressクエリパラメータつきURLを静的URLにリライト ～ 完全版 ～","slug":"wordpress-custom-rewrite-rule","date":"2019-04-03T22:55:00.000Z","updated":"2019-04-07T10:21:48.000Z","comments":true,"path":"wordpress-custom-rewrite-rule/","link":"","permalink":"https://lancers.work/wordpress-custom-rewrite-rule/","excerpt":"","text":"本記事の目的はWordPressでクエリ文字付き動的URLを静的URLにリライトし、クエリパラメータの値を取得することです。 WordPressの公式サイト通りに関数を追加したり、コードを書けばできますが、その他のページをさまよっていてすぐに実装できなかったのでまとめておきます。 1https://kusanagi.lancers.work/food/?pref=hokkaido&amp;city=sapporo ↑これを↓これにリライトし、クエリパラメータの値を取得します。 1https://kusanagi.lancers.work/food/hokkaido/sapporo (adsbygoogle = window.adsbygoogle || []).push({}); 目 次 2つの関数追加 １．カスタムクエリ文字列変数の認識 ２．ユーザーフレンドリーなカスタムURLを作成 パーマリンクデータベースの更新（最重要） クエリの値を受け取る 2つの関数追加テーマファイル内のfunctions.phpに次の2つの関数を追加します。 １．カスタムクエリ文字列変数の認識12345function custom_rewrite_tag() &#123; add_rewrite_tag('%pref%', '([^&amp;]+)'); add_rewrite_tag('%city%', '([^&amp;]+)');&#125;add_action('init', 'custom_rewrite_tag', 10, 0); ここではprefやcityはクエリの文字列ですよ！とWordPressに認識させています。 クエリの文字列とは、例えば https://kusanagi.lancers.work/food/?pref=hokkaido のprefにあたります。 prefやcity以外の箇所は何も考えずコピペしてください。 ２．ユーザーフレンドリーなカスタムURLを作成1234function custom_rewrite_rule() &#123; add_rewrite_rule('^food/([^/]*)/([^/]*)/?$', 'index.php?page_id=固定ページの番号&amp;pref=$matches[1]&amp;city=$matches[2]', 'top');&#125;add_action('init', 'custom_rewrite_rule', 10, 0); ここでは静的URLと動的URLの関連付けを行っています。 1add_rewrite_rule('^food/([^/]*)/([^/]*)/?$' 今回は、クエリ文字がprefとcityの2つありますので、/([^/])/([^/])/のように記述します。 最初の()内がpref相当、次の()内がcityにあたります。クエリ文字の数だけ記述してください。 そして、クエリの値を受け取るのが、 1'index.php?page_id=固定ページの番号&amp;pref=$matches[1]&amp;city=$matches[2]' の箇所になります。 $matchesは定義された名前ですので、$matchesは修正せず、パラメータの数だけ、[1]、[2]、[3]・・・と振ってあげます。※$matches[1]に最初のクエリパラメータの値が入りますので、0からでなく1から始めます。 (adsbygoogle = window.adsbygoogle || []).push({}); パーマリンクデータベースの更新（最重要）この作業を忘れると、どんなに関数を追加しても反映されません。 「設定」→「パーマリンク設定」で何も変更せずに「変更を保存」ボタンを押して、パーマリンクのデータベースを更新します。 クエリの値を受け取る1234global $wp_query;$pref = $wp_query-&gt;query_vars['pref'];$city= $wp_query-&gt;query_vars['city']; とすることでprefの値hokkaidoを取得することができます。 city=sapporoも同様に取得できます。 以上の流れで、WordPressの動的URLを静的URLに変換し、クエリパラメータの値を取得することができます。 WordPressのカスタムリライトが効かないというかたは、是非この順に沿って設定してみてください。 この記事がお役に立てるととても嬉しいです！ (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"WordPress","slug":"WordPress","permalink":"https://lancers.work/tags/WordPress/"}]},{"title":"Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～","slug":"numbers-2","date":"2019-04-03T09:40:00.000Z","updated":"2019-04-07T10:20:18.000Z","comments":true,"path":"numbers-2/","link":"","permalink":"https://lancers.work/numbers-2/","excerpt":"","text":"※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBERS3 &amp; NUMBERS4）の超お役立ちアプリ（大げさ）作成に関するナレッジの続き第2回目です。 ナンバーズ3アプリナンバーズ4はこちら ナンバーズ3 過去10回の当選数字 集計回数 ナンバーズ3 過去10回の当選数字出現回数 (adsby… ナンバーズ4アプリナンバーズ3はこちら ナンバーズ4 過去10回の当選数字 集計回数 ナンバーズ4 過去10回の当選数字出現回数 (adsby… 前回の記事はこちらです。 Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER… 今年の目標がNode.jsを極める！ですので、かなりの初心者コードですが、参考やヒラメキの一助になればと思い書いています。 今回でナンバーズアプリに関するナレッジは最終回です。 アプリが完成しましたら、公開していきたいと思います。 (adsbygoogle = window.adsbygoogle || []).push({}); 目 次 配列のソート jsonファイルの保存 配列のソートcheerio-httpcliで取得した回数、抽選日、当選番号はそれぞれarray.tit、array.date、array.winに格納されています。 1&#123;\"tit\":[\"第5104回\",\"第5105回\",\"第5106回\",\"第5107回\",\"第5108回\",\"第5109回\",\"第5110回\",\"第5111回\",\"第5112回\",\"第5113回\",\"第5114回\",\"第5115回\",\"第5116回\",\"第5117回\",\"第5118回\",\"第5119回\",\"第5120回\",\"第5121回\",\"第5122回\",\"第5123回\"],\"date\":[\"2019/02/01\",\"2019/02/04\",\"2019/02/05\",\"2019/02/06\",\"2019/02/07\",\"2019/02/08\",\"2019/02/11\",\"2019/02/12\",\"2019/02/13\",\"2019/02/14\",\"2019/02/15\",\"2019/02/18\",\"2019/02/19\",\"2019/02/20\",\"2019/02/21\",\"2019/02/22\",\"2019/02/25\",\"2019/02/26\",\"2019/02/27\",\"2019/02/28\"],\"win\":[\"049\",\"766\",\"322\",\"660\",\"626\",\"684\",\"077\",\"882\",\"087\",\"446\",\"771\",\"878\",\"991\",\"956\",\"831\",\"672\",\"661\",\"635\",\"663\",\"366\"]&#125; これらを最新日付順にソートし、numbersという名前の配列に入れ直します。 まず、回数と抽選日と当選番号を組み合わせます。 123456for(var i=0; i&lt;resJson.tit.length; i++) &#123; var tit = arrayJson.tit[i]; var date = arrayJson.date[i]; var win = arrayJson.win[i]; numbers.push(&#123;tit, date, win&#125;);&#125; この結果、 1[&#123;\"tit\":\"第5104回\",\"date\":\"2019/02/01\",\"win\":\"049\"&#125;,&#123;\"tit\":\"第5105回\",\"date\":\"2019/02/04\",\"win\":\"766\"&#125;,&#123;\"tit\":\"第5106回\",\"date\":\"2019/02/05\",\"win\":\"322\"&#125;,&#123;\"tit\":\"第5107回\",\"date\":\"2019/02/06\",\"win\":\"660\"&#125;,&#123;\"tit\":\"第5108回\",\"date\":\"2019/02/07\",\"win\":\"626\"&#125;,&#123;\"tit\":\"第5109回\",\"date\":\"2019/02/08\",\"win\":\"684\"&#125;,&#123;\"tit\":\"第5110回\",\"date\":\"2019/02/11\",\"win\":\"077\"&#125;,&#123;\"tit\":\"第5111回\",\"date\":\"2019/02/12\",\"win\":\"882\"&#125;,&#123;\"tit\":\"第5112回\",\"date\":\"2019/02/13\",\"win\":\"087\"&#125;,&#123;\"tit\":\"第5113回\",\"date\":\"2019/02/14\",\"win\":\"446\"&#125;,&#123;\"tit\":\"第5114回\",\"date\":\"2019/02/15\",\"win\":\"771\"&#125;,&#123;\"tit\":\"第5115回\",\"date\":\"2019/02/18\",\"win\":\"878\"&#125;,&#123;\"tit\":\"第5116回\",\"date\":\"2019/02/19\",\"win\":\"991\"&#125;,&#123;\"tit\":\"第5117回\",\"date\":\"2019/02/20\",\"win\":\"956\"&#125;,&#123;\"tit\":\"第5118回\",\"date\":\"2019/02/21\",\"win\":\"831\"&#125;,&#123;\"tit\":\"第5119回\",\"date\":\"2019/02/22\",\"win\":\"672\"&#125;,&#123;\"tit\":\"第5120回\",\"date\":\"2019/02/25\",\"win\":\"661\"&#125;,&#123;\"tit\":\"第5121回\",\"date\":\"2019/02/26\",\"win\":\"635\"&#125;,&#123;\"tit\":\"第5122回\",\"date\":\"2019/02/27\",\"win\":\"663\"&#125;,&#123;\"tit\":\"第5123回\",\"date\":\"2019/02/28\",\"win\":\"366\"&#125;] こうなります。 この状態でdateをキーに抽選日降順にソートします。※ツールで最新の当選番号が上に来るように設計したためソートします。 (adsbygoogle = window.adsbygoogle || []).push({}); 123456// 降順の場合numbers.sort(function(a,b) &#123; if(a.date &gt; b.date) return -1; if(a.date &lt; b.date) return 1; return 0;&#125;); この結果、 1[&#123;\"tit\":\"第5123回\",\"date\":\"2019/02/28\",\"win\":\"366\"&#125;,&#123;\"tit\":\"第5122回\",\"date\":\"2019/02/27\",\"win\":\"663\"&#125;,&#123;\"tit\":\"第5121回\",\"date\":\"2019/02/26\",\"win\":\"635\"&#125;,&#123;\"tit\":\"第5120回\",\"date\":\"2019/02/25\",\"win\":\"661\"&#125;,&#123;\"tit\":\"第5119回\",\"date\":\"2019/02/22\",\"win\":\"672\"&#125;,&#123;\"tit\":\"第5118回\",\"date\":\"2019/02/21\",\"win\":\"831\"&#125;,&#123;\"tit\":\"第5117回\",\"date\":\"2019/02/20\",\"win\":\"956\"&#125;,&#123;\"tit\":\"第5116回\",\"date\":\"2019/02/19\",\"win\":\"991\"&#125;,&#123;\"tit\":\"第5115回\",\"date\":\"2019/02/18\",\"win\":\"878\"&#125;,&#123;\"tit\":\"第5114回\",\"date\":\"2019/02/15\",\"win\":\"771\"&#125;,&#123;\"tit\":\"第5113回\",\"date\":\"2019/02/14\",\"win\":\"446\"&#125;,&#123;\"tit\":\"第5112回\",\"date\":\"2019/02/13\",\"win\":\"087\"&#125;,&#123;\"tit\":\"第5111回\",\"date\":\"2019/02/12\",\"win\":\"882\"&#125;,&#123;\"tit\":\"第5110回\",\"date\":\"2019/02/11\",\"win\":\"077\"&#125;,&#123;\"tit\":\"第5109回\",\"date\":\"2019/02/08\",\"win\":\"684\"&#125;,&#123;\"tit\":\"第5108回\",\"date\":\"2019/02/07\",\"win\":\"626\"&#125;,&#123;\"tit\":\"第5107回\",\"date\":\"2019/02/06\",\"win\":\"660\"&#125;,&#123;\"tit\":\"第5106回\",\"date\":\"2019/02/05\",\"win\":\"322\"&#125;,&#123;\"tit\":\"第5105回\",\"date\":\"2019/02/04\",\"win\":\"766\"&#125;,&#123;\"tit\":\"第5104回\",\"date\":\"2019/02/01\",\"win\":\"049\"&#125;] こうなります。 これでアプリで使いたかったjson形式のナンバーズ当選番号データが完成しました。 jsonファイルの保存12var fs = require('fs');fs.writeFile('numbers3.json', JSON.stringify(winJson)); ファイルの保存は特に書くことはありません。 以上でNode.jsで作るナンバーズアプリの準備ができましたので、あとはこのデータを加工しながら当選ロジックを完成させたいと思います。 今作っているナンバーズアプリですがテレビでも放映された理論を取り入れたアプリです。 テレビでは理論上100％当選と謳っていて、実際に当選していました。 ですので、ナンバーズアプリの公開を期待していてください！ (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"},{"name":"アプリの素","slug":"アプリの素","permalink":"https://lancers.work/categories/アプリの素/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Express","slug":"Express","permalink":"https://lancers.work/tags/Express/"}]},{"title":"Node.jsによるナンバーズアプリ ～ 1.スクレイピング編 ～","slug":"numbers-1","date":"2019-04-03T09:39:00.000Z","updated":"2019-04-07T10:19:58.000Z","comments":true,"path":"numbers-1/","link":"","permalink":"https://lancers.work/numbers-1/","excerpt":"","text":"※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBERS3 &amp; NUMBERS4）の超お役立ちアプリ（大げさ）に関するナレッジです！ ナンバーズ3アプリナンバーズ4はこちら ナンバーズ3 過去10回の当選数字 集計回数 ナンバーズ3 過去10回の当選数字出現回数 (adsby… ナンバーズ4アプリナンバーズ3はこちら ナンバーズ4 過去10回の当選数字 集計回数 ナンバーズ4 過去10回の当選数字出現回数 (adsby… 瞬時に直近○○回分の当選数字と当選回数を表示します！（直近30回分が対象） 以前、KUSANAGIのWordPress上でPHPで組んだツールの焼き直しです。 アプリの公開は後日追記しますので、本記事はプログラムの流れの備忘録です。 (adsbygoogle = window.adsbygoogle || []).push({}); 目 次 スクレイピング（cheerio-httpcli） スクレイピング（cheerio-httpcli）Node.jsでナンバースの当選番号を某サイトからスクレイピングするプログラムを書きました。 スクレイピングの結果はjsonファイルに保存し、1日に1回更新とし、相手先のサイトに迷惑をかけないようにしています。 スクレイピングのモジュールはcheerio-httpcliを使いました。 今回はスクレイピングの結果を保存する関係で、同期処理にて組みました。 cheerio-httpcliの非同期処理の書き方 12345var client = require('cheerio-httpcli');client.fetch('https://対象URL/', &#123;&#125;, function (err, $, result) &#123; ・・・&#125;); 普通にデータ収集・加工後にデータをまとめてjsonファイルに保存しようとすると、保存処理が先に走ってしまい、空のファイルが出来上がってしまいました。 いろいろやり方はあると思いますが（教えてください！）、今回は同期処理にてスクレイピング → ファイル保存を行いました。 (adsbygoogle = window.adsbygoogle || []).push({}); 1234567891011121314151617181920212223242526272829var client = require('cheerio-httpcli');var array = &#123;&#125;;array.tit = [];array.date = [];array.win = [];var html = client.fetchSync('https://某NUMBERS当選番号公開ページURL/');// 第○○回を取得html.$('th').each(function (idx) &#123; if(html.$(this).text().match('第')) &#123; array.tit.push(html.$(this).text()); &#125;&#125;);// 抽選日を取得html.$('td').each(function (idx) &#123; if(html.$(this).text().match('/')) &#123; array.date.push(html.$(this).text()); &#125;&#125;);// 当選番号を取得 html.$('td').each(function (idx) &#123; if(html.$(this).text() &lt; 1000) &#123; array.win.push(html.$(this).text()); &#125;&#125;); このサイトの当選番号はtableで表示しているのですが、抽選日ごとにtableがあったり、thやtdなどにclassがあてられてなかったり、かつ、データの並びをうまく整理できず、eq(0)などで正常に取得できなかったので、非常に原始的な処理にしました。 第1234回という回数はthに第の文字が含まれていたら回数として取得 抽選日はtdに/が入っていたら日付として取得 当選番号（ナンバーズ3）の場合、当選数字は最大値として見ると999なので、1000以下の数字がtdに入っていたら当選番号として取得 こんな感じでターゲットのデータを取得し、配列に格納しています。 PHPではスマートに書けけているので、もう少し考えてみようとは思っています。 それでは長くなりましたので、今回はスクレイピングまでということで、その他のナレッジについては次回に続きます。 Node.jsによるナンバーズアプリ ～ 2.配列のソート・jsonファイル保存編 ～※Node.jsアプリ作成の共有コーナーです。※Node.jsアプリ作成にはExpressを使用しています。 今回はナンバーズ（NUMBER… (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"},{"name":"アプリの素","slug":"アプリの素","permalink":"https://lancers.work/categories/アプリの素/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Express","slug":"Express","permalink":"https://lancers.work/tags/Express/"}]},{"title":"Hexoのサイドバーのアーカイブ日付表示の変更方法","slug":"hexo-hueman-list-archives-date","date":"2019-04-02T04:40:00.000Z","updated":"2019-04-07T10:18:02.000Z","comments":true,"path":"hexo-hueman-list-archives-date/","link":"","permalink":"https://lancers.work/hexo-hueman-list-archives-date/","excerpt":"","text":"Hexoでブログを書き始めてかなり満足度の高い作業ができています。 Hexoブログ開設以来、ずっと気になっていて修正方法がわからなかった箇所があります。 ここです。 サイドバーのアーカイブの日付が漢数字になっています。 今回はこの日付の表示方法を変更していきましょう！ (adsbygoogle = window.adsbygoogle || []).push({}); 目 次 archive.ejsの修正 archive.ejsの修正このブログのテーマは、huemanを使っていますので、他のテーマの方は記事内容を適宜読み替えたり、参考にしてみてください。 ppoffice/hexo-theme-huemanA redesign of Alx&#39;s wordpress theme hueman, ported to Hexo. - ppoffice… 編集するファイルは、 /~/Hexoブログフォルダ/themes/hueman/layout/widget/archive.ejs です。 ファイルの中身は、 12345678&lt;% if (site.posts.length) &#123; %&gt; &lt;div class=\"widget-wrap widget-list\"&gt; &lt;h3 class=\"widget-title\"&gt;&lt;%= __('sidebar.archives') %&gt;&lt;/h3&gt; &lt;div class=\"widget\"&gt; &lt;%- list_archives() %&gt; &lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; となっています。 この5行目を次のように修正します。 1&lt;%- list_archives(&#123;format: \"YYYY年MM月\"&#125;) %&gt; &quot;YYYY年MM月&quot;としましたが、&quot;YYYY/MM&quot;や&quot;YYYY-MM&quot;でも問題ありません。 この修正だけで、最初の中華っぽい漢数字の日付から洋風なオシャレ（？）な日付表示に変更できました。 これでかなりHexoブログのカスタマイズが進み、ほぼ現時点では完成に近い感じです。 しいて言えば、関連記事の表示をもう少し工夫したいところです。 これからNode.jsアプリをガシガシ作って、このブログで公開したり、ノウハウの共有をしていきたいと思います。 (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"https://lancers.work/tags/Hexo/"}]},{"title":"Hexoのプラグインが機能しないので修正してみた ～ hexo-tag-link-preview編 ～","slug":"hexo-plugin-fix-tag-link-preview","date":"2019-03-31T22:19:00.000Z","updated":"2019-04-07T10:19:22.000Z","comments":true,"path":"hexo-plugin-fix-tag-link-preview/","link":"","permalink":"https://lancers.work/hexo-plugin-fix-tag-link-preview/","excerpt":"","text":"「Hexoのプラグインが機能しないので修正してみた」第二弾はhexo-tag-link-previewです。 このプラグインはリンク先をカードのように表示してくれるカッコいいプラグインです。こんな感じ。 Hexoのプラグインが機能しないので修正してみた ～ hexo-toc編 ～KUSANAGI（WordPress）からHexoへブログを移行して数日がたちました。 ブログをガシガシ書き始めたというより、ブログの体裁を… この連載記事シリーズは管理人の環境に依存、管理人仕様的なところがあります。 gitにもnpmにも上げていませんし、プラグインが更新されるとまた修正しなければいけませんし、かといって修正版を公開するところまで至っていません。 また、プラグインの使い方が間違っているよ！ということもあるかもしれません。（製作者の方、すみません。） 以上を踏まえて、同じところで悩まれ修正することができた人がいれば嬉しい限りです。 目 次 hexo-tag-link-preview 不具合の症状 hexo-tag-link-preview 不具合の解消 修正対象ファイル：index.js hexo-tag-link-preview 不具合の症状今回の不具合の気づきは、このプラグインであるあタグ｛% linkPreview https://www.amazon.com/ _blank nofollow %｝（例、}は表示上大文字になっています）を記事内に記述したところエラーで静的ファイルが生成されなかったことにあります。 タグの記述を何回見直しても正しかったので、これはプラグインファイルに原因が！ということで、該当ファイルを修正したところ上記のように表示されるようになりました。 この不具合は後日談ですがhexo sのエラーメッセージをよく見ればすぐに解決する内容でした。 もう一点、_config.ymlに記述したオプションが機能しないということです。 class名をあてられないのは前回のhexo-tocより大きな問題ではありませんでしたが（管理人のケース）、キャプションの文字数が反映されないのが困りました。 (adsbygoogle = window.adsbygoogle || []).push({}); hexo-tag-link-preview 不具合の解消プラグインの実体はnode_modulesフォルダ内にあります。 hexo-tag-link-previewの実体はhexo-tag-link-previewフォルダになります。 修正対象ファイル：index.js25行目 1async function getTag(options) &#123; これを、 1function getTag(options) &#123; というように先頭のasyncを削除したところ、hexo s、hexo gを実行してもエラーが出なくなり静的ファイルが生成されるようになりました。 asyncは非同期処理を実行するためにつけるのですが、同期処理でも今のところ問題ないので、削除したまま使っています。 キャプションの文字数は_config.ymlで変更できない状況にあるため、同じファイルindex.jsに直書きしてしのいでいます。 15行目 1? hexo.config.linkPreview.descriptionLength : 70; 末尾の数字を変更します。 以上、2点の不具合の解決方法はこれだけとなります。 本記事執筆現在手を加えたプラグインは2つですが、Hexoには便利なプラグインたくさんありますね。 今までKUSANAGI（WordPress）で作っていた表現がほぼ表現できます。 WordPressはかなり昔から使っていましたが、今では当たり前になって多くの人が使い、なんとなく嫌気がさしていたので、Hexoに乗り換えて正解です！ 動的サイト、WordPress、PHPから脱却してみませんか？ (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"https://lancers.work/tags/Hexo/"}]},{"title":"Hexoのプラグインが機能しないので修正してみた ～ hexo-toc編 ～","slug":"hexo-plugin-fix-toc","date":"2019-03-31T22:19:00.000Z","updated":"2019-04-07T10:19:42.000Z","comments":true,"path":"hexo-plugin-fix-toc/","link":"","permalink":"https://lancers.work/hexo-plugin-fix-toc/","excerpt":"","text":"KUSANAGI（WordPress）からHexoへブログを移行して数日がたちました。 ブログをガシガシ書き始めたというより、ブログの体裁を整える日を送っています。 そんな中、Hexoのプラグインが機能しないという症状に度々遭遇したので、修正した内容を備忘録として書き留めていきます。 なお、この修正は管理人の環境、管理人仕様的なところがあります。 gitにもnpmにも上げていませんし、プラグインが更新されるとまた修正しなければいけませんし、修正版を公開するところまで至っていません。 また、プラグインの使い方が間違っているよ！ということもあるかもしれません。 以上を踏まえて、修正される方の参考になれば幸いです。 目 次 hexo-toc 不具合の症状 hexo-toc 不具合の解消 修正対象ファイル：lib/filter.js おまけ hexo-toc 不具合の症状言わずとしれた、ブログに目次を自動で付けてくれるプラグインです。 hexo-tocInsert a markdown TOC(Table Of Content) before posts be rendered. 目次自体は&lt;！-- toc --&gt;を記事内に記述することで表示はできました。 しかし、_config.ymlに記述したオプションが効かないのです。 123456789toc: maxdepth: 3 class: toc slugify: transliteration decodeEntities: false anchor: position: after symbol: '#' style: header-anchor 特に目次のデザインを調整したくclassをあてたかったので、classtocを追加するよう修正していきます。 (adsbygoogle = window.adsbygoogle || []).push({}); hexo-toc 不具合の解消プラグインの実体はnode_modulesフォルダ内にあります。 hexo-tocの場合、そのまんまhexo-tocフォルダになります。 不具合解消の基本的な流れとして、オプションでclassが指定されていたらその指定値をclass名とするという仕様ですので、オプションの指定に関わらず、classtocを追加します。 修正対象ファイル：lib/filter.js※コードのブログでの表示上、大文字になっている箇所があります。 9行目～12行目 1234// add class optionif (options.class) &#123; data.content = data.content.replace(\"&lt;！-- toc --&gt;\", '&lt;div class=\"' + options.class + 'Start\"&gt;&lt;/div&gt;&lt;！-- toc --&gt;&lt;div class=\"' + options.class + 'End\"&gt;&lt;/div&gt;');&#125; これを、 12// add class optiondata.content = data.content.replace(\"&lt;！-- toc --&gt;\", '&lt;div class=\"tocStart\"&gt;&lt;/div&gt;&lt;！-- toc --&gt;&lt;div class=\"tocEnd\"&gt;&lt;/div&gt;'); 54行目～57行目 1234// add class optionif (options.class) &#123; data.content = data.content.replace('&lt;div class=\"' + options.class + 'Start\"&gt;&lt;/div&gt;', '&lt;div class=\"' + options.class + '\"&gt;').replace('&lt;div class=\"' + options.class + 'End\"&gt;&lt;/div&gt;', '&lt;/div&gt;');&#125; これを 12// add class optiondata.content = data.content.replace('&lt;div class=\"tocStart\"&gt;&lt;/div&gt;', '&lt;div class=\"toc\"&gt;').replace('&lt;div class=\"tocEnd\"&gt;&lt;/div&gt;', '&lt;/div&gt;'); これでclasstocが当たりますので、あとはCSSでお好きなデザインにカスタマイズしてみてください。 おまけ目次のタイトルの修正も合わせて行いました。 タイトルのidが&lt;span id=&quot;目次&quot;&gt;となってしまっていたことと、その度tocタグの上に目次と入力するのが面倒なので、上の修正箇所を更に修正して、 12// add class optiondata.content = data.content.replace('&lt;div class=\"tocStart\"&gt;&lt;/div&gt;', '&lt;div class=\"toc-title\"&gt;目 次&lt;/div&gt;&lt;div class=\"toc\"&gt;').replace('&lt;div class=\"tocEnd\"&gt;&lt;/div&gt;', '&lt;/div&gt;'); というように目次というテキストとclassを予め付加しました。 汎用性がなくなる記述ですが、目次のタイトルは目次ですし、class（id）も日本語でなくなるので、超個人的ではありますが、このブログではこちらを使っていきます。 (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"https://lancers.work/tags/Hexo/"}]},{"title":"KUSANAGIのLAMP環境にHexoを構築","slug":"hexo-on-kusanagi","date":"2019-03-29T22:10:00.000Z","updated":"2019-04-07T10:19:04.000Z","comments":true,"path":"hexo-on-kusanagi/","link":"","permalink":"https://lancers.work/hexo-on-kusanagi/","excerpt":"","text":"まだHexoでブログを書き始めたばかりで、正直Node.jsでのWEBアプリ開発はまだ本格的に始めていません。 HexoはNode.jsをほとんど意識せず、テキストを書き続けることで爆速ブログができていきますので、これはこれで楽しいです。 そんなHexoですが運営環境としてKUSANAGIとの連携が簡単というのが今回のお話です。 特にNode.jsやHexo初心者の方にはおすすめです。 目 次 KUSANAGIの特徴 KUSANAGI環境へHexoをインストールする KUSANAGIによるLAMPプロビジョニング Hexoインストール Nginx設定 KUSANAGIの特徴KUSANAGIとは超高速WordPress仮想マシンです。 KUSANAGIはWordPressを高速に動かすだけでなく、すばやくLAMP環境を構築したり、Let’s EncryptによるSSL化を簡単にしたり、複数のWordPressなどを追加・削除できます。 このようにサーバー運営に必要な機能がてんこ盛り、かつ、便利な仮想マシンです。 このKUSANAGI環境とHexoを組み合わせて、簡単にHexoブログを公開しようというのが本記事の内容です。 KUSANAGI環境へHexoをインストールするNode.jsのインストールはこちらの記事を参考に済ませておいてください。 Hexo（node.js）で静的ブログを構築してみるもともとは、超高速WordPress仮想マシン「KUSANAGI」でWEBアプリを量産しようということで、KUSANAGIでブログを書いてい… KUSANAGIによるLAMPプロビジョニングKUSANAGIでLAMPをプロビジョニングします。 1$ kusanagi provision --lamp hexo-blog --lampを省略してしまいますとWordPressがインストールされてしましますので、--lampは必須です。 --lampを指定したので、WordPressはインストールされず、プロファイル名hexo-blog（任意の名前で可）の空のドキュメントルートが作成されます。 プロビジョニング作業が進んでいくと、ドメインの設定やLet’s EncryptによるSSL化が実行されますので、この後のHexoインストール作業後にSSL化作業などを行う必要がありません、ここが楽です！ (adsbygoogle = window.adsbygoogle || []).push({}); HexoインストールHexo自体をインストールしていない人は、下記コマンドでインストールしてください。 1$ npm install hexo-cli -g KUSANAGIで作成したLAMPのドキュメントルートにHexoをインストールします。 123456789# LAMPドキュメントルートへ移動$ cd /home/kusanagi/hexo-blog/DocumentRoot# blogは任意の名前でOK$ hexo init blog$ cd blog$ npm install これで/home/kusanagi/hexo-blog/DocumentRoot/blogにHexoブログ一式がインストールされます。 1$ hexo server サーバーを起動しlocalhost:4000またはローカルIPアドレス:4000にアクセスして、サンプルサイトが表示されることを確認してみてください。 Nginx設定KUSANAGIでLAMPを構築しますと、 /etc/nginx/conf.d/hexo-blog_http.conf /etc/nginx/conf.d/hexo-blog_ssl.conf というファイルが作成されています。 これらのconfファイルのルートディレクトリの記述を次のように書き換えます。 root /home/kusanagi/hexo-blog/DocumentRoot/blog/public; 最後のpublicは固定文字列です。 Hexoで静的ファイルを生成するとpublicフォルダにブログの静的ファイルが格納されますので、それをそのまま公開用のディレクトリにしてしまおうという設定です。 GitHub PagesやNetlifyにデプロイすることもできますが、お手軽に独自ドメインで公開するにはKUSANAGIを使うと難易度が下がると思います。 KUSANAGIとHexoの連携いかがでしたでしょうか？ KUSANAGI（WordPress）からHexo（Node.js）に移行しましたが、やはりKUSANAGIは素晴らしい仕組みです。 (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"KUSANAGI","slug":"KUSANAGI","permalink":"https://lancers.work/tags/KUSANAGI/"},{"name":"let's encrypt","slug":"let-s-encrypt","permalink":"https://lancers.work/tags/let-s-encrypt/"}]},{"title":"都道府県・市区町村フォームをできる限り少ない行数で書いてみる","slug":"pref-city-form-jquery-json","date":"2019-03-29T06:53:00.000Z","updated":"2019-04-07T10:21:15.000Z","comments":true,"path":"pref-city-form-jquery-json/","link":"","permalink":"https://lancers.work/pref-city-form-jquery-json/","excerpt":"","text":"目 次 基本データ（都道府県・市区町村 json形式データ） jQueryで都道府県・市区町村連動型フォームを作る サンプル jQueryソース HTMLソース 基本データ（都道府県・市区町村 json形式データ）当ブログで用意している都道府県・市区町村のjsonデータの形式は、 [{&quot;01&quot;:{&quot;id&quot;:&quot;01″,&quot;pref&quot;:&quot;北海道&quot;,&quot;en&quot;:&quot;hokkaido&quot;,&quot;city&quot;:[{&quot;id&quot;:&quot;01100″,&quot;name&quot;:&quot;札幌市&quot;},{&quot;id&quot;:&quot;01101″,&quot;name&quot;:&quot;中央区&quot;}, ・・・] となっています。 キー id：都道府県コード pref：都道府県名 en：都道府県英字名 city：市区町村データ（id：市区町村コード、name：市区町村名） 常に最新の「都道府県・市区町村jsonデータ」は↓こちらのリンク↓からダウンロードできます。 都道府県・市区町村 jsonデータ ※データは毎日更新しています。※クリックでダウンロードできない場合は、右クリックでリンク先を保存してください。※ご利用の際はダウンロードしてお使いください。 (adsbygoogle = window.adsbygoogle || []).push({}); jQueryで都道府県・市区町村連動型フォームを作るサンプル都道府県を選択してください市区町村を選択してください // 都道府県フォーム生成 $(function() { $.getJSON('../../json/pref_city.json', function(data) { for(var i=0; i","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://lancers.work/tags/jQuery/"},{"name":"json","slug":"json","permalink":"https://lancers.work/tags/json/"},{"name":"HTML","slug":"HTML","permalink":"https://lancers.work/tags/HTML/"}]},{"title":"Hexo（node.js）で静的ブログを構築してみる","slug":"hexo-nodejs-blog","date":"2019-03-28T20:23:00.000Z","updated":"2019-04-07T10:18:39.000Z","comments":true,"path":"hexo-nodejs-blog/","link":"","permalink":"https://lancers.work/hexo-nodejs-blog/","excerpt":"","text":"もともとは、超高速WordPress仮想マシン「KUSANAGI」でWEBアプリを量産しようということで、KUSANAGIでブログを書いていました。（今もぼちぼち書いてます） なぜ、Node.jsに切り替えたのか？ それは2018年末にNode.js+Express環境を構築して途中までWEBアプリを作成していたことを思い出し、さらに、2019年初「今年の目標はnode.jsを極める」を目標に掲げていたからです。 クライアント様の案件はPHPが多くなかなかNode.jsを使う機会がなかったので、年度の切り替えを機にあらためて今年の目標達成に向けて始動したという経緯です。 目 次 Node.jsインストール MongDBインストール Hexoインストール Node.jsインストール当初、CentOS7ではエラーが出てしまい、時間の無駄と思いubuntuに切り替えたのですが、この度無事このようにKUSANAGIを動かしているCentOS7にNode.jsでのブログ環境を構築できました。 それではNode.jsのブログ環境を整えていきましょう。 1234567891011$ sudo yum install -y epel-release$ sudo yum -y update$ sudo yum install -y nodejs$ node -vv6.16.0$ npm -v3.10.10 MongDBインストール前回、ここでハマりました。 MongoDBをなにげにyumでインストールしましたが、エラーで一向に立ち上がらない。。。 そして一晩調べた結果、公式通りにやりましたら、なんのなんのすんなりいきました（公式は嘘つかない←当たり前） MongoDBの公式ページはこちらです。 Install MongoDB Community Edition on Red Hat Enterprise or CentOS Linux — MongoDB Manual ポイントは/etc/yum.repos.d/mongodb-org-4.0.repoを公式通りに作成または修正することでした。 /etc/yum.repos.d/mongodb-org-4.0.repoを、 123456[mongodb-org-4.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc と公式ページ記載の通り記述します（上記の内容は執筆時点ですので、インストール時は最新の情報を確認してください。） あとはインストールと実行あるのみです！ 123$ sudo yum install -y mongodb-org$ sudo service mongod start ※MongoDBは開発用にインストールしました。 (adsbygoogle = window.adsbygoogle || []).push({}); Hexoインストール前回のブログでは、Keystoneをインストールしました。 Keystoneはブログももちろん書けますが、WEBアプリ開発に向いているかなという感じを持ちましたので、ブログはブログに特化したHexoに変更しました。 Hexoのインストール方法も公式ページに素直に従いましょう。 HexoHexo is a fast, simple &amp; powerful blog framework powered by Node.js. 123456789$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 「blog」はプロファイル名=ブログを格納する場所です。 hexo serverを実行すると、開発環境下ではhttp://ローカルIPアドレス:4000でサイトを見ることができます。 簡単ですが、Node.jsでブログを開設するところまでの解説でした。 このあとまだまだ設定したりする箇所もあります。 目標であるNode.jsアプリの開発もガシガシやっていきたいと思います。 それらはこちらのブログに随時書いていきたいと思いますのでよろしくお願いします。 (adsbygoogle = window.adsbygoogle || []).push({});","categories":[{"name":"ナレッジ","slug":"ナレッジ","permalink":"https://lancers.work/categories/ナレッジ/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://lancers.work/tags/Node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"https://lancers.work/tags/Hexo/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://lancers.work/tags/MongoDB/"}]}]}